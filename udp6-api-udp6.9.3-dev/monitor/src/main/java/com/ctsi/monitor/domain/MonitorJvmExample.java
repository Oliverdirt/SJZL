package com.ctsi.monitor.domain;

import com.ctsi.ssdc.criteria.DoubleCriteria;
import com.ctsi.ssdc.criteria.LongCriteria;
import com.ctsi.ssdc.criteria.ZonedDateTimeCriteria;
import com.ctsi.ssdc.example.BaseExample;
import io.swagger.annotations.ApiParam;

import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * MonitorJvmExample
 *
 * @author hx
 * @date 2022-05-27 14:02:10
 */

public class MonitorJvmExample extends BaseExample {

    /**
     * This field was generated by  Generator.
     * This field corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    protected String orderByClause;

    /**
     * This field was generated by  Generator.
     * This field corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    protected boolean distinct;

    /**
     * This field was generated by  Generator.
     * This field corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by  Generator.
     * This field corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    private static final String LIKE_FORMAT = "%%%s%%";


        /**
         *
         * This field was generated by  Generator.
         * This field corresponds to the database column monitor_jvm.id
         *
         * @date 2022-05-27 14:02:10
         */
    private LongCriteria id;

        /**
         *
         * This field was generated by  Generator.
         * This field corresponds to the database column monitor_jvm.total
         *
         * @date 2022-05-27 14:02:10
         */
    private DoubleCriteria total;

        /**
         *
         * This field was generated by  Generator.
         * This field corresponds to the database column monitor_jvm.max
         *
         * @date 2022-05-27 14:02:10
         */
    private DoubleCriteria max;

        /**
         *
         * This field was generated by  Generator.
         * This field corresponds to the database column monitor_jvm.free
         *
         * @date 2022-05-27 14:02:10
         */
    private DoubleCriteria free;

        /**
         *
         * This field was generated by  Generator.
         * This field corresponds to the database column monitor_jvm.used
         *
         * @date 2022-05-27 14:02:10
         */
    private DoubleCriteria used;

        /**
         *
         * This field was generated by  Generator.
         * This field corresponds to the database column monitor_jvm.usages
         *
         * @date 2022-05-27 14:02:10
         */
    private DoubleCriteria usages;

        /**
         *
         * This field was generated by  Generator.
         * This field corresponds to the database column monitor_jvm.time
         *
         * @date 2022-05-27 14:02:10
         */
    private ZonedDateTimeCriteria time;


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public MonitorJvmExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    @Override
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public LongCriteria getId() {
        return id;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void setId(LongCriteria id) {
        this. id = id;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    private void buildIdCriteria(Criteria criteria) {
        if (this.getId() == null) {
            return;
        }
        if (this.getId().getEquals() != null) {
            criteria.andIdEqualTo(this.getId().getEquals());
        } else {
            if (this.getId().getGreaterOrEqualThan() != null) {
                criteria.andIdGreaterThanOrEqualTo(this.getId().getGreaterOrEqualThan());
            }
            if (this.getId().getLessOrEqualThan() != null) {
                criteria.andIdLessThanOrEqualTo(this.getId().getLessOrEqualThan());
            }
        }
    }
    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public DoubleCriteria getTotal() {
        return total;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void setTotal(DoubleCriteria total) {
        this. total = total;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    private void buildTotalCriteria(Criteria criteria) {
        if (this.getTotal() == null) {
            return;
        }
        if (this.getTotal().getEquals() != null) {
            criteria.andTotalEqualTo(this.getTotal().getEquals());
        } else {
            if (this.getTotal().getGreaterOrEqualThan() != null) {
                criteria.andTotalGreaterThanOrEqualTo(this.getTotal().getGreaterOrEqualThan());
            }
            if (this.getTotal().getLessOrEqualThan() != null) {
                criteria.andTotalLessThanOrEqualTo(this.getTotal().getLessOrEqualThan());
            }
        }
    }
    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public DoubleCriteria getMax() {
        return max;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void setMax(DoubleCriteria max) {
        this. max = max;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    private void buildMaxCriteria(Criteria criteria) {
        if (this.getMax() == null) {
            return;
        }
        if (this.getMax().getEquals() != null) {
            criteria.andMaxEqualTo(this.getMax().getEquals());
        } else {
            if (this.getMax().getGreaterOrEqualThan() != null) {
                criteria.andMaxGreaterThanOrEqualTo(this.getMax().getGreaterOrEqualThan());
            }
            if (this.getMax().getLessOrEqualThan() != null) {
                criteria.andMaxLessThanOrEqualTo(this.getMax().getLessOrEqualThan());
            }
        }
    }
    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public DoubleCriteria getFree() {
        return free;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void setFree(DoubleCriteria free) {
        this. free = free;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    private void buildFreeCriteria(Criteria criteria) {
        if (this.getFree() == null) {
            return;
        }
        if (this.getFree().getEquals() != null) {
            criteria.andFreeEqualTo(this.getFree().getEquals());
        } else {
            if (this.getFree().getGreaterOrEqualThan() != null) {
                criteria.andFreeGreaterThanOrEqualTo(this.getFree().getGreaterOrEqualThan());
            }
            if (this.getFree().getLessOrEqualThan() != null) {
                criteria.andFreeLessThanOrEqualTo(this.getFree().getLessOrEqualThan());
            }
        }
    }
    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public DoubleCriteria getUsed() {
        return used;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void setUsed(DoubleCriteria used) {
        this. used = used;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    private void buildUsedCriteria(Criteria criteria) {
        if (this.getUsed() == null) {
            return;
        }
        if (this.getUsed().getEquals() != null) {
            criteria.andUsedEqualTo(this.getUsed().getEquals());
        } else {
            if (this.getUsed().getGreaterOrEqualThan() != null) {
                criteria.andUsedGreaterThanOrEqualTo(this.getUsed().getGreaterOrEqualThan());
            }
            if (this.getUsed().getLessOrEqualThan() != null) {
                criteria.andUsedLessThanOrEqualTo(this.getUsed().getLessOrEqualThan());
            }
        }
    }
    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public DoubleCriteria getUsages() {
        return usages;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void setUsages(DoubleCriteria usages) {
        this. usages = usages;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    private void buildUsagesCriteria(Criteria criteria) {
        if (this.getUsages() == null) {
            return;
        }
        if (this.getUsages().getEquals() != null) {
            criteria.andUsagesEqualTo(this.getUsages().getEquals());
        } else {
            if (this.getUsages().getGreaterOrEqualThan() != null) {
                criteria.andUsagesGreaterThanOrEqualTo(this.getUsages().getGreaterOrEqualThan());
            }
            if (this.getUsages().getLessOrEqualThan() != null) {
                criteria.andUsagesLessThanOrEqualTo(this.getUsages().getLessOrEqualThan());
            }
        }
    }
    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public ZonedDateTimeCriteria getTime() {
        return time;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public void setTime(ZonedDateTimeCriteria time) {
        this. time = time;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    private void buildTimeCriteria(Criteria criteria) {
        if (this.getTime() == null) {
            return;
        }
        if (this.getTime().getEquals() != null) {
            criteria.andTimeEqualTo(this.getTime().getEquals());
        } else {
            if (this.getTime().getGreaterOrEqualThan() != null) {
                criteria.andTimeGreaterThanOrEqualTo(this.getTime().getGreaterOrEqualThan());
            }
            if (this.getTime().getLessOrEqualThan() != null) {
                criteria.andTimeLessThanOrEqualTo(this.getTime().getLessOrEqualThan());
            }
        }
    }
    /**
      * This method was generated by  Generator.
      * This method corresponds to the database table cscp_hx_form_column
      *
      * @date Thu Feb 17 14:02:06 CST 2022
      */
    @Override
    public Object buildCriteria() {
        Criteria criteria = this.createCriteria();
        this.buildIdCriteria(criteria);
        this.buildTotalCriteria(criteria);
        this.buildMaxCriteria(criteria);
        this.buildFreeCriteria(criteria);
        this.buildUsedCriteria(criteria);
        this.buildUsagesCriteria(criteria);
        this.buildTimeCriteria(criteria);
        return criteria;
    }

    protected abstract static class BaseGeneratedCriteria {
        protected List<Criterion> criteria;

        protected BaseGeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }


        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andTotalIsNull() {
            addCriterion("total is null");
            return (Criteria) this;
        }

        public Criteria andTotalIsNotNull() {
            addCriterion("total is not null");
            return (Criteria) this;
        }

        public Criteria andTotalEqualTo(Double value) {
            addCriterion("total =", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalNotEqualTo(Double value) {
            addCriterion("total <>", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalGreaterThan(Double value) {
            addCriterion("total >", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalGreaterThanOrEqualTo(Double value) {
            addCriterion("total >=", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalLessThan(Double value) {
            addCriterion("total <", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalLessThanOrEqualTo(Double value) {
            addCriterion("total <=", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalIn(List<Double> values) {
            addCriterion("total in", values, "total");
            return (Criteria) this;
        }

        public Criteria andTotalNotIn(List<Double> values) {
            addCriterion("total not in", values, "total");
            return (Criteria) this;
        }

        public Criteria andTotalBetween(Double value1, Double value2) {
            addCriterion("total between", value1, value2, "total");
            return (Criteria) this;
        }

        public Criteria andTotalNotBetween(Double value1, Double value2) {
            addCriterion("total not between", value1, value2, "total");
            return (Criteria) this;
        }

        public Criteria andMaxIsNull() {
            addCriterion("max is null");
            return (Criteria) this;
        }

        public Criteria andMaxIsNotNull() {
            addCriterion("max is not null");
            return (Criteria) this;
        }

        public Criteria andMaxEqualTo(Double value) {
            addCriterion("max =", value, "max");
            return (Criteria) this;
        }

        public Criteria andMaxNotEqualTo(Double value) {
            addCriterion("max <>", value, "max");
            return (Criteria) this;
        }

        public Criteria andMaxGreaterThan(Double value) {
            addCriterion("max >", value, "max");
            return (Criteria) this;
        }

        public Criteria andMaxGreaterThanOrEqualTo(Double value) {
            addCriterion("max >=", value, "max");
            return (Criteria) this;
        }

        public Criteria andMaxLessThan(Double value) {
            addCriterion("max <", value, "max");
            return (Criteria) this;
        }

        public Criteria andMaxLessThanOrEqualTo(Double value) {
            addCriterion("max <=", value, "max");
            return (Criteria) this;
        }

        public Criteria andMaxIn(List<Double> values) {
            addCriterion("max in", values, "max");
            return (Criteria) this;
        }

        public Criteria andMaxNotIn(List<Double> values) {
            addCriterion("max not in", values, "max");
            return (Criteria) this;
        }

        public Criteria andMaxBetween(Double value1, Double value2) {
            addCriterion("max between", value1, value2, "max");
            return (Criteria) this;
        }

        public Criteria andMaxNotBetween(Double value1, Double value2) {
            addCriterion("max not between", value1, value2, "max");
            return (Criteria) this;
        }

        public Criteria andFreeIsNull() {
            addCriterion("free is null");
            return (Criteria) this;
        }

        public Criteria andFreeIsNotNull() {
            addCriterion("free is not null");
            return (Criteria) this;
        }

        public Criteria andFreeEqualTo(Double value) {
            addCriterion("free =", value, "free");
            return (Criteria) this;
        }

        public Criteria andFreeNotEqualTo(Double value) {
            addCriterion("free <>", value, "free");
            return (Criteria) this;
        }

        public Criteria andFreeGreaterThan(Double value) {
            addCriterion("free >", value, "free");
            return (Criteria) this;
        }

        public Criteria andFreeGreaterThanOrEqualTo(Double value) {
            addCriterion("free >=", value, "free");
            return (Criteria) this;
        }

        public Criteria andFreeLessThan(Double value) {
            addCriterion("free <", value, "free");
            return (Criteria) this;
        }

        public Criteria andFreeLessThanOrEqualTo(Double value) {
            addCriterion("free <=", value, "free");
            return (Criteria) this;
        }

        public Criteria andFreeIn(List<Double> values) {
            addCriterion("free in", values, "free");
            return (Criteria) this;
        }

        public Criteria andFreeNotIn(List<Double> values) {
            addCriterion("free not in", values, "free");
            return (Criteria) this;
        }

        public Criteria andFreeBetween(Double value1, Double value2) {
            addCriterion("free between", value1, value2, "free");
            return (Criteria) this;
        }

        public Criteria andFreeNotBetween(Double value1, Double value2) {
            addCriterion("free not between", value1, value2, "free");
            return (Criteria) this;
        }

        public Criteria andUsedIsNull() {
            addCriterion("used is null");
            return (Criteria) this;
        }

        public Criteria andUsedIsNotNull() {
            addCriterion("used is not null");
            return (Criteria) this;
        }

        public Criteria andUsedEqualTo(Double value) {
            addCriterion("used =", value, "used");
            return (Criteria) this;
        }

        public Criteria andUsedNotEqualTo(Double value) {
            addCriterion("used <>", value, "used");
            return (Criteria) this;
        }

        public Criteria andUsedGreaterThan(Double value) {
            addCriterion("used >", value, "used");
            return (Criteria) this;
        }

        public Criteria andUsedGreaterThanOrEqualTo(Double value) {
            addCriterion("used >=", value, "used");
            return (Criteria) this;
        }

        public Criteria andUsedLessThan(Double value) {
            addCriterion("used <", value, "used");
            return (Criteria) this;
        }

        public Criteria andUsedLessThanOrEqualTo(Double value) {
            addCriterion("used <=", value, "used");
            return (Criteria) this;
        }

        public Criteria andUsedIn(List<Double> values) {
            addCriterion("used in", values, "used");
            return (Criteria) this;
        }

        public Criteria andUsedNotIn(List<Double> values) {
            addCriterion("used not in", values, "used");
            return (Criteria) this;
        }

        public Criteria andUsedBetween(Double value1, Double value2) {
            addCriterion("used between", value1, value2, "used");
            return (Criteria) this;
        }

        public Criteria andUsedNotBetween(Double value1, Double value2) {
            addCriterion("used not between", value1, value2, "used");
            return (Criteria) this;
        }

        public Criteria andUsagesIsNull() {
            addCriterion("usages is null");
            return (Criteria) this;
        }

        public Criteria andUsagesIsNotNull() {
            addCriterion("usages is not null");
            return (Criteria) this;
        }

        public Criteria andUsagesEqualTo(Double value) {
            addCriterion("usages =", value, "usages");
            return (Criteria) this;
        }

        public Criteria andUsagesNotEqualTo(Double value) {
            addCriterion("usages <>", value, "usages");
            return (Criteria) this;
        }

        public Criteria andUsagesGreaterThan(Double value) {
            addCriterion("usages >", value, "usages");
            return (Criteria) this;
        }

        public Criteria andUsagesGreaterThanOrEqualTo(Double value) {
            addCriterion("usages >=", value, "usages");
            return (Criteria) this;
        }

        public Criteria andUsagesLessThan(Double value) {
            addCriterion("usages <", value, "usages");
            return (Criteria) this;
        }

        public Criteria andUsagesLessThanOrEqualTo(Double value) {
            addCriterion("usages <=", value, "usages");
            return (Criteria) this;
        }

        public Criteria andUsagesIn(List<Double> values) {
            addCriterion("usages in", values, "usages");
            return (Criteria) this;
        }

        public Criteria andUsagesNotIn(List<Double> values) {
            addCriterion("usages not in", values, "usages");
            return (Criteria) this;
        }

        public Criteria andUsagesBetween(Double value1, Double value2) {
            addCriterion("usages between", value1, value2, "usages");
            return (Criteria) this;
        }

        public Criteria andUsagesNotBetween(Double value1, Double value2) {
            addCriterion("usages not between", value1, value2, "usages");
            return (Criteria) this;
        }

        public Criteria andTimeIsNull() {
            addCriterion("time is null");
            return (Criteria) this;
        }

        public Criteria andTimeIsNotNull() {
            addCriterion("time is not null");
            return (Criteria) this;
        }

        public Criteria andTimeEqualTo(ZonedDateTime value) {
            addCriterion("time =", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeNotEqualTo(ZonedDateTime value) {
            addCriterion("time <>", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeGreaterThan(ZonedDateTime value) {
            addCriterion("time >", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeGreaterThanOrEqualTo(ZonedDateTime value) {
            addCriterion("time >=", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeLessThan(ZonedDateTime value) {
            addCriterion("time <", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeLessThanOrEqualTo(ZonedDateTime value) {
            addCriterion("time <=", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeIn(List<ZonedDateTime> values) {
            addCriterion("time in", values, "time");
            return (Criteria) this;
        }

        public Criteria andTimeNotIn(List<ZonedDateTime> values) {
            addCriterion("time not in", values, "time");
            return (Criteria) this;
        }

        public Criteria andTimeBetween(ZonedDateTime value1, ZonedDateTime value2) {
            addCriterion("time between", value1, value2, "time");
            return (Criteria) this;
        }

        public Criteria andTimeNotBetween(ZonedDateTime value1, ZonedDateTime value2) {
            addCriterion("time not between", value1, value2, "time");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by  Generator.
     * This class corresponds to the database table  monitor_jvm
     *
     * @date do_not_delete_during_merge 2022-05-27 14:02:10
     */
    public static class Criteria extends BaseGeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by  Generator.
     * This class corresponds to the database table  monitor_jvm
     *
     * @date 2022-05-27 14:02:10
     */
    public static class Criterion {
        @ApiParam(hidden = true)
        private String condition;

        @ApiParam(hidden = true)
        private Object value;

        @ApiParam(hidden = true)
        private Object secondValue;

        @ApiParam(hidden = true)
        private boolean noValue;

        @ApiParam(hidden = true)
        private boolean singleValue;

        @ApiParam(hidden = true)
        private boolean betweenValue;

        @ApiParam(hidden = true)
        private boolean listValue;

        @ApiParam(hidden = true)
        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }

    }
}
