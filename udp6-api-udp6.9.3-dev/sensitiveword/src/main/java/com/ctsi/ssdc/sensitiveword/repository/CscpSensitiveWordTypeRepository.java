package com.ctsi.ssdc.sensitiveword.repository;

import java.util.List;

import com.ctsi.ssdc.repository.BaseRepository;
import com.ctsi.ssdc.sensitiveword.domain.CscpSensitiveWordType;
import com.ctsi.ssdc.sensitiveword.domain.CscpSensitiveWordTypeExample;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;


/**
 * @author ctsi-biyi-generator
*/
@Mapper
public interface CscpSensitiveWordTypeRepository extends BaseRepository<CscpSensitiveWordType, Long, CscpSensitiveWordTypeExample> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @SelectProvider(type=CscpSensitiveWordTypeSqlProvider.class, method="countByExample")
    long countByExample(CscpSensitiveWordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @DeleteProvider(type=CscpSensitiveWordTypeSqlProvider.class, method="deleteByExample")
    int deleteByExample(CscpSensitiveWordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @Delete({
        "delete from cscp_sensitive_word_type",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @Insert({
        "insert into cscp_sensitive_word_type ( id, sen_type_name, sen_type_order, ",
        "update_time)",
        "values (#{id,jdbcType=BIGINT},#{senTypeName,jdbcType=VARCHAR}, #{senTypeOrder,jdbcType=INTEGER}, ",
        "#{updateTime,jdbcType=TIMESTAMP})"
    })
//    @Options(useGeneratedKeys=true, keyProperty="id")
    int insert(CscpSensitiveWordType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @InsertProvider(type=CscpSensitiveWordTypeSqlProvider.class, method="insertSelective")
//    @Options(useGeneratedKeys=true, keyProperty="id")
    int insertSelective(CscpSensitiveWordType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @SelectProvider(type=CscpSensitiveWordTypeSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="sen_type_name", property="senTypeName", jdbcType=JdbcType.VARCHAR),
        @Result(column="sen_type_order", property="senTypeOrder", jdbcType=JdbcType.INTEGER),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<CscpSensitiveWordType> selectByExample(CscpSensitiveWordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @Select({
        "select",
        "id, sen_type_name, sen_type_order, update_time",
        "from cscp_sensitive_word_type",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="sen_type_name", property="senTypeName", jdbcType=JdbcType.VARCHAR),
        @Result(column="sen_type_order", property="senTypeOrder", jdbcType=JdbcType.INTEGER),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    CscpSensitiveWordType selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @UpdateProvider(type=CscpSensitiveWordTypeSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") CscpSensitiveWordType record, @Param("example") CscpSensitiveWordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @UpdateProvider(type=CscpSensitiveWordTypeSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") CscpSensitiveWordType record, @Param("example") CscpSensitiveWordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @UpdateProvider(type=CscpSensitiveWordTypeSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(CscpSensitiveWordType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word_type
     *
     */
    @Override
    @Update({
        "update cscp_sensitive_word_type",
        "set sen_type_name = #{senTypeName,jdbcType=VARCHAR},",
          "sen_type_order = #{senTypeOrder,jdbcType=INTEGER},",
          "update_time = #{updateTime,jdbcType=TIMESTAMP}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(CscpSensitiveWordType record);

    /**
     * 批量删除
     * @param ids
     */
    @Delete("<script>" +
            "delete from cscp_sensitive_word_type where id in" +
            "<foreach collection=\"ids\" item=\"id\" open=\"(\" separator=\",\" close=\")\">" +
            "#{id}" +
            "</foreach>" +
            "</script>")
    void deleteByIds(@Param("ids") List<Long> ids);

    @Select({
            "SELECT type.* from cscp_sensitive_word_type type left JOIN cscp_sensitive_word word" ,
                    "on type.id =word.sen_type_id ",
                    "GROUP BY type.id HAVING count(word.id) >0"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="sen_type_name", property="senTypeName", jdbcType=JdbcType.VARCHAR),
            @Result(column="sen_type_order", property="senTypeOrder", jdbcType=JdbcType.INTEGER),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<CscpSensitiveWordType> getSensitiveWordTypesListNonempty();
}