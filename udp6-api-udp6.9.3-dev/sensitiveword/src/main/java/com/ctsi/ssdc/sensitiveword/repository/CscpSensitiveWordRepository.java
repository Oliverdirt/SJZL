package com.ctsi.ssdc.sensitiveword.repository;


import com.ctsi.ssdc.repository.BaseRepository;
import com.ctsi.ssdc.sensitiveword.domain.CscpSensitiveWord;
import com.ctsi.ssdc.sensitiveword.domain.CscpSensitiveWordExample;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
import java.util.List;


/**
 * @author ctsi-biyi-generator
*/
@Mapper
public interface CscpSensitiveWordRepository extends BaseRepository<CscpSensitiveWord, Long, CscpSensitiveWordExample> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @SelectProvider(type=CscpSensitiveWordSqlProvider.class, method="countByExample")
    long countByExample(CscpSensitiveWordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @DeleteProvider(type=CscpSensitiveWordSqlProvider.class, method="deleteByExample")
    int deleteByExample(CscpSensitiveWordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @Delete({
        "delete from cscp_sensitive_word",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @Insert({
        "insert into cscp_sensitive_word ( id, sen_type_id, sen_content, ",
        "sen_replace, update_time)",
        "values (#{id,jdbcType=BIGINT},#{senTypeId,jdbcType=BIGINT}, #{senContent,jdbcType=VARCHAR}, ",
        "#{senReplace,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})"
    })
//    @Options(useGeneratedKeys=true, keyProperty="id")
    int insert(CscpSensitiveWord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @InsertProvider(type=CscpSensitiveWordSqlProvider.class, method="insertSelective")
//    @Options(useGeneratedKeys=true, keyProperty="id")
    int insertSelective(CscpSensitiveWord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @SelectProvider(type=CscpSensitiveWordSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="sen_type_id", property="senTypeId", jdbcType=JdbcType.BIGINT),
        @Result(column="sen_type_name", property="senTypeName", jdbcType=JdbcType.VARCHAR),
        @Result(column="sen_content", property="senContent", jdbcType=JdbcType.VARCHAR),
        @Result(column="sen_replace", property="senReplace", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<CscpSensitiveWord> selectByExample(CscpSensitiveWordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @Select({
        "select",
        "id, sen_type_id, sen_content, sen_replace, update_time",
        "from cscp_sensitive_word",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="sen_type_id", property="senTypeId", jdbcType=JdbcType.BIGINT),
        @Result(column="sen_content", property="senContent", jdbcType=JdbcType.VARCHAR),
        @Result(column="sen_replace", property="senReplace", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    CscpSensitiveWord selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @UpdateProvider(type=CscpSensitiveWordSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") CscpSensitiveWord record, @Param("example") CscpSensitiveWordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @UpdateProvider(type=CscpSensitiveWordSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") CscpSensitiveWord record, @Param("example") CscpSensitiveWordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @UpdateProvider(type=CscpSensitiveWordSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(CscpSensitiveWord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_sensitive_word
     *
     */
    @Override
    @Update({
        "update cscp_sensitive_word",
        "set sen_type_id = #{senTypeId,jdbcType=BIGINT},",
          "sen_content = #{senContent,jdbcType=VARCHAR},",
          "sen_replace = #{senReplace,jdbcType=VARCHAR},",
          "update_time = #{updateTime,jdbcType=TIMESTAMP}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(CscpSensitiveWord record);



    /**
     * 批量删除
     * @param ids
     */
    @Delete("<script>" +
            "delete from cscp_sensitive_word where id in" +
            "<foreach collection=\"ids\" item=\"id\" open=\"(\" separator=\",\" close=\")\">" +
            "#{id}" +
            "</foreach>" +
            "</script>")
    void deleteByIds(@Param("ids") Long[] ids);


    @Select({
            "select",
            "id, sen_type_id, sen_content, sen_replace, update_time",
            "from cscp_sensitive_word",
            "where sen_type_id = #{type,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="sen_type_id", property="senTypeId", jdbcType=JdbcType.BIGINT),
            @Result(column="sen_content", property="senContent", jdbcType=JdbcType.VARCHAR),
            @Result(column="sen_replace", property="senReplace", jdbcType=JdbcType.VARCHAR),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<CscpSensitiveWord> selectBySensitiveWordType(Long type);
}