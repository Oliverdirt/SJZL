package com.ctsi.ssdc.customize.repository;

import com.ctsi.ssdc.customize.domain.CscpHxDformColumn;
import com.ctsi.ssdc.customize.domain.CscpHxDformColumnExample.Criteria;
import com.ctsi.ssdc.customize.domain.CscpHxDformColumnExample.Criterion;
import com.ctsi.ssdc.customize.domain.CscpHxDformColumnExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;


/**
 * CscpHxDformColumnSqlProvider
 *
 * @author hx
 * @date 2022-11-14 14:36:13
*/

public class CscpHxDformColumnSqlProvider {

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_hx_dform_column
     */
    public String countByExample(CscpHxDformColumnExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("cscp_hx_dform_column");
        applyWhere(sql, example, false);
        return sql.toString();
    }


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_hx_dform_column
     */
    public String deleteByExample(CscpHxDformColumnExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("cscp_hx_dform_column");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_hx_dform_column
     */
    public String insertSelective(CscpHxDformColumn record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("cscp_hx_dform_column");

        if (record.getColumnId() != null) {
            sql.VALUES("column_id", "#{columnId,jdbcType=BIGINT}");
        }
        if (record.getTableId() != null) {
            sql.VALUES("table_id", "#{tableId,jdbcType=BIGINT}");
        }
        if (record.getColumnName() != null) {
            sql.VALUES("column_name", "#{columnName,jdbcType=VARCHAR}");
        }
        if (record.getColumnNameOld() != null) {
            sql.VALUES("column_name_old", "#{columnNameOld,jdbcType=VARCHAR}");
        }
        if (record.getColumnComment() != null) {
            sql.VALUES("column_comment", "#{columnComment,jdbcType=VARCHAR}");
        }
        if (record.getColumnType() != null) {
            sql.VALUES("column_type", "#{columnType,jdbcType=INTEGER}");
        }
        if (record.getColumnLength() != null) {
            sql.VALUES("column_length", "#{columnLength,jdbcType=BIGINT}");
        }
        if (record.getPointLength() != null) {
            sql.VALUES("point_length", "#{pointLength,jdbcType=INTEGER}");
        }
        if (record.getIsPk() != null) {
            sql.VALUES("is_pk", "#{isPk,jdbcType=INTEGER}");
        }
        if (record.getDefaultValue() != null) {
            sql.VALUES("default_value", "#{defaultValue,jdbcType=VARCHAR}");
        }
        if (record.getIsNull() != null) {
            sql.VALUES("is_null", "#{isNull,jdbcType=INTEGER}");
        }
        if (record.getOrderNum() != null) {
            sql.VALUES("order_num", "#{orderNum,jdbcType=INTEGER}");
        }
        if (record.getIsForm() != null) {
            sql.VALUES("is_form", "#{isForm,jdbcType=INTEGER}");
        }
        if (record.getIsList() != null) {
            sql.VALUES("is_list", "#{isList,jdbcType=INTEGER}");
        }
        if (record.getIsQuery() != null) {
            sql.VALUES("is_query", "#{isQuery,jdbcType=BIGINT}");
        }
        if (record.getShowType() != null) {
            sql.VALUES("show_type", "#{showType,jdbcType=INTEGER}");
        }
        if (record.getQueryType() != null) {
            sql.VALUES("query_type", "#{queryType,jdbcType=INTEGER}");
        }
        if (record.getControlLength() != null) {
            sql.VALUES("control_length", "#{controlLength,jdbcType=INTEGER}");
        }
        if (record.getDicCode() != null) {
            sql.VALUES("dic_code", "#{dicCode,jdbcType=VARCHAR}");
        }
        if (record.getValidateRule() != null) {
            sql.VALUES("validate_rule", "#{validateRule,jdbcType=VARCHAR}");
        }
        if (record.getIsFk() != null) {
            sql.VALUES("is_fk", "#{isFk,jdbcType=VARCHAR}");
        }

        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_hx_dform_column
     */
    public String selectByExample(CscpHxDformColumnExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("column_id");
        } else {
            sql.SELECT("column_id");
        }
        sql.SELECT("table_id");
        sql.SELECT("column_name");
        sql.SELECT("column_name_old");
        sql.SELECT("column_comment");
        sql.SELECT("column_type");
        sql.SELECT("column_length");
        sql.SELECT("point_length");
        sql.SELECT("is_pk");
        sql.SELECT("default_value");
        sql.SELECT("is_null");
        sql.SELECT("order_num");
        sql.SELECT("is_form");
        sql.SELECT("is_list");
        sql.SELECT("is_query");
        sql.SELECT("show_type");
        sql.SELECT("query_type");
        sql.SELECT("control_length");
        sql.SELECT("dic_code");
        sql.SELECT("validate_rule");
        sql.SELECT("is_fk");
        sql.FROM("cscp_hx_dform_column");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_hx_dform_column
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        CscpHxDformColumn record = (CscpHxDformColumn) parameter.get("record");
        CscpHxDformColumnExample example = (CscpHxDformColumnExample) parameter.get("example");

        SQL sql = new SQL();
        sql.UPDATE("cscp_hx_dform_column");

        if (record.getColumnId() != null) {
        sql.SET("column_id = #{columnId,jdbcType=BIGINT}");
        }
        if (record.getTableId() != null) {
        sql.SET("table_id = #{tableId,jdbcType=BIGINT}");
        }
        if (record.getColumnName() != null) {
        sql.SET("column_name = #{columnName,jdbcType=VARCHAR}");
        }
        if (record.getColumnNameOld() != null) {
        sql.SET("column_name_old = #{columnNameOld,jdbcType=VARCHAR}");
        }
        if (record.getColumnComment() != null) {
        sql.SET("column_comment = #{columnComment,jdbcType=VARCHAR}");
        }
        if (record.getColumnType() != null) {
        sql.SET("column_type = #{columnType,jdbcType=INTEGER}");
        }
        if (record.getColumnLength() != null) {
        sql.SET("column_length = #{columnLength,jdbcType=BIGINT}");
        }
        if (record.getPointLength() != null) {
        sql.SET("point_length = #{pointLength,jdbcType=INTEGER}");
        }
        if (record.getIsPk() != null) {
        sql.SET("is_pk = #{isPk,jdbcType=INTEGER}");
        }
        if (record.getDefaultValue() != null) {
        sql.SET("default_value = #{defaultValue,jdbcType=VARCHAR}");
        }
        if (record.getIsNull() != null) {
        sql.SET("is_null = #{isNull,jdbcType=INTEGER}");
        }
        if (record.getOrderNum() != null) {
        sql.SET("order_num = #{orderNum,jdbcType=INTEGER}");
        }
        if (record.getIsForm() != null) {
        sql.SET("is_form = #{isForm,jdbcType=INTEGER}");
        }
        if (record.getIsList() != null) {
        sql.SET("is_list = #{isList,jdbcType=INTEGER}");
        }
        if (record.getIsQuery() != null) {
        sql.SET("is_query = #{isQuery,jdbcType=BIGINT}");
        }
        if (record.getShowType() != null) {
        sql.SET("show_type = #{showType,jdbcType=INTEGER}");
        }
        if (record.getQueryType() != null) {
        sql.SET("query_type = #{queryType,jdbcType=INTEGER}");
        }
        if (record.getControlLength() != null) {
        sql.SET("control_length = #{controlLength,jdbcType=INTEGER}");
        }
        if (record.getDicCode() != null) {
        sql.SET("dic_code = #{dicCode,jdbcType=VARCHAR}");
        }
        if (record.getValidateRule() != null) {
        sql.SET("validate_rule = #{validateRule,jdbcType=VARCHAR}");
        }
        if (record.getIsFk() != null) {
        sql.SET("is_fk = #{isFk,jdbcType=VARCHAR}");
        }
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_hx_dform_column
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("cscp_hx_dform_column");
        sql.SET("column_id = #{columnId,jdbcType=BIGINT}");
        sql.SET("table_id = #{tableId,jdbcType=BIGINT}");
        sql.SET("column_name = #{columnName,jdbcType=VARCHAR}");
        sql.SET("column_name_old = #{columnNameOld,jdbcType=VARCHAR}");
        sql.SET("column_comment = #{columnComment,jdbcType=VARCHAR}");
        sql.SET("column_type = #{columnType,jdbcType=INTEGER}");
        sql.SET("column_length = #{columnLength,jdbcType=BIGINT}");
        sql.SET("point_length = #{pointLength,jdbcType=INTEGER}");
        sql.SET("is_pk = #{isPk,jdbcType=INTEGER}");
        sql.SET("default_value = #{defaultValue,jdbcType=VARCHAR}");
        sql.SET("is_null = #{isNull,jdbcType=INTEGER}");
        sql.SET("order_num = #{orderNum,jdbcType=INTEGER}");
        sql.SET("is_form = #{isForm,jdbcType=INTEGER}");
        sql.SET("is_list = #{isList,jdbcType=INTEGER}");
        sql.SET("is_query = #{isQuery,jdbcType=BIGINT}");
        sql.SET("show_type = #{showType,jdbcType=INTEGER}");
        sql.SET("query_type = #{queryType,jdbcType=INTEGER}");
        sql.SET("control_length = #{controlLength,jdbcType=INTEGER}");
        sql.SET("dic_code = #{dicCode,jdbcType=VARCHAR}");
        sql.SET("validate_rule = #{validateRule,jdbcType=VARCHAR}");
        sql.SET("is_fk = #{isFk,jdbcType=VARCHAR}");

        CscpHxDformColumnExample example = (CscpHxDformColumnExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_hx_dform_column
     */
    public String updateByPrimaryKeySelective(CscpHxDformColumn record) {
        SQL sql = new SQL();
        sql.UPDATE("cscp_hx_dform_column");

        if (record.getTableId() != null) {
            sql.SET("table_id = #{tableId,jdbcType=BIGINT}");
        }
        if (record.getColumnName() != null) {
            sql.SET("column_name = #{columnName,jdbcType=VARCHAR}");
        }
        if (record.getColumnNameOld() != null) {
            sql.SET("column_name_old = #{columnNameOld,jdbcType=VARCHAR}");
        }
        if (record.getColumnComment() != null) {
            sql.SET("column_comment = #{columnComment,jdbcType=VARCHAR}");
        }
        if (record.getColumnType() != null) {
            sql.SET("column_type = #{columnType,jdbcType=INTEGER}");
        }
        if (record.getColumnLength() != null) {
            sql.SET("column_length = #{columnLength,jdbcType=BIGINT}");
        }
        if (record.getPointLength() != null) {
            sql.SET("point_length = #{pointLength,jdbcType=INTEGER}");
        }
        if (record.getIsPk() != null) {
            sql.SET("is_pk = #{isPk,jdbcType=INTEGER}");
        }
        if (record.getDefaultValue() != null) {
            sql.SET("default_value = #{defaultValue,jdbcType=VARCHAR}");
        }
        if (record.getIsNull() != null) {
            sql.SET("is_null = #{isNull,jdbcType=INTEGER}");
        }
        if (record.getOrderNum() != null) {
            sql.SET("order_num = #{orderNum,jdbcType=INTEGER}");
        }
        if (record.getIsForm() != null) {
            sql.SET("is_form = #{isForm,jdbcType=INTEGER}");
        }
        if (record.getIsList() != null) {
            sql.SET("is_list = #{isList,jdbcType=INTEGER}");
        }
        if (record.getIsQuery() != null) {
            sql.SET("is_query = #{isQuery,jdbcType=BIGINT}");
        }
        if (record.getShowType() != null) {
            sql.SET("show_type = #{showType,jdbcType=INTEGER}");
        }
        if (record.getQueryType() != null) {
            sql.SET("query_type = #{queryType,jdbcType=INTEGER}");
        }
        if (record.getControlLength() != null) {
            sql.SET("control_length = #{controlLength,jdbcType=INTEGER}");
        }
        if (record.getDicCode() != null) {
            sql.SET("dic_code = #{dicCode,jdbcType=VARCHAR}");
        }
        if (record.getValidateRule() != null) {
            sql.SET("validate_rule = #{validateRule,jdbcType=VARCHAR}");
        }
        if (record.getIsFk() != null) {
            sql.SET("is_fk = #{isFk,jdbcType=VARCHAR}");
        }
        sql.WHERE("column_id = #{columnId,jdbcType=BIGINT}");

        return sql.toString();
    }


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_hx_dform_column
     */
    protected void applyWhere(SQL sql, CscpHxDformColumnExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }

        String parmPhrase1;
        String parmPhrase1Th;
        String parmPhrase2;
        String parmPhrase2Th;
        String parmPhrase3;
        String parmPhrase3Th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }

        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }

                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }

                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1Th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2Th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3Th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }

        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}
