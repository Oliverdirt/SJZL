package com.ctsi.ssdc.customize.repository;


import java.util.List;
import java.util.Map;

import com.ctsi.ssdc.customize.domain.CscpCustomizeVpage;
import com.ctsi.ssdc.customize.domain.CscpCustomizeVpageExample;
import org.apache.ibatis.jdbc.SQL;


/**
 * CscpCustomizeVpageSqlProvider
 *
 * @author hx
 * @date 2022-09-26 16:45:11
 */

public class CscpCustomizeVpageSqlProvider {

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_customize_vpage
     */
    public String countByExample(CscpCustomizeVpageExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("cscp_customize_vpage");
        applyWhere(sql, example, false);
        return sql.toString();
    }


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_customize_vpage
     */
    public String deleteByExample(CscpCustomizeVpageExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("cscp_customize_vpage");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_customize_vpage
     */
    public String insertSelective(CscpCustomizeVpage record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("cscp_customize_vpage");

        if (record.getPageId() != null) {
            sql.VALUES("page_id", "#{pageId,jdbcType=BIGINT}");
        }
        if (record.getModuleId() != null) {
            sql.VALUES("module_id", "#{moduleId,jdbcType=BIGINT}");
        }
        if (record.getPageName() != null) {
            sql.VALUES("page_name", "#{pageName,jdbcType=VARCHAR}");
        }
        if (record.getPageType() != null) {
            sql.VALUES("page_type", "#{pageType,jdbcType=VARCHAR}");
        }
        if (record.getPageDatabase() != null) {
            sql.VALUES("page_database", "#{pageDatabase,jdbcType=VARCHAR}");
        }
        if (record.getPageTable() != null) {
            sql.VALUES("page_table", "#{pageTable,jdbcType=VARCHAR}");
        }
        if (record.getPageJson() != null) {
            sql.VALUES("page_json", "#{pageJson,jdbcType=VARCHAR}");
        }
        if (record.getPageOption() != null) {
            sql.VALUES("page_option", "#{pageOption,jdbcType=VARCHAR}");
        }
        if (record.getCreatedBy() != null) {
            sql.VALUES("created_by", "#{createdBy,jdbcType=BIGINT}");
        }
        if (record.getCreatedTime() != null) {
            sql.VALUES("created_time", "#{createdTime,jdbcType=DATE}");
        }
        if (record.getUpdateBy() != null) {
            sql.VALUES("update_by", "#{updateBy,jdbcType=BIGINT}");
        }
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=DATE}");
        }
        if (record.getTenantId() != null) {
            sql.VALUES("tenant_id", "#{tenantId,jdbcType=BIGINT}");
        }
        if (record.getDelFlag() != null) {
            sql.VALUES("del_flag", "#{delFlag,jdbcType=VARCHAR}");
        }
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=VARCHAR}");
        }
        if (record.getTableType() != null) {
            sql.VALUES("table_type", "#{tableType,jdbcType=VARCHAR}");
        }
        if (record.getMainPageId() != null) {
            sql.VALUES("main_page_id", "#{mainPageId,jdbcType=BIGINT}");
        }
        if (record.getSortNum() != null) {
            sql.VALUES("sort_num", "#{sortNum,jdbcType=INTEGER}");
        }
        if (record.getSubPageFk() != null) {
            sql.VALUES("sub_page_fk", "#{subPageFk,jdbcType=VARCHAR}");
        }
        if (record.getTableDesc() != null) {
            sql.VALUES("table_desc", "#{tableDesc,jdbcType=VARCHAR}");
        }
        if (record.getIsMainPage() != null) {
            sql.VALUES("is_main_page", "#{isMainPage,jdbcType=VARCHAR}");
        }
        if (record.getModelId() != null) {
            sql.VALUES("model_id", "#{modelId,jdbcType=BIGINT}");
        }
        if (record.getModelName() != null) {
            sql.VALUES("model_name", "#{modelName,jdbcType=VARCHAR}");
        }
        if (record.getModuleName() != null) {
            sql.VALUES("module_name", "#{moduleName,jdbcType=VARCHAR}");
        }

        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_customize_vpage
     */
    public String selectByExample(CscpCustomizeVpageExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("page_id");
        } else {
            sql.SELECT("page_id");
        }
        sql.SELECT("module_id");
        sql.SELECT("page_name");
        sql.SELECT("page_type");
        sql.SELECT("page_database");
        sql.SELECT("page_table");
        sql.SELECT("page_json");
        sql.SELECT("page_option");
        sql.SELECT("created_by");
        sql.SELECT("created_time");
        sql.SELECT("update_by");
        sql.SELECT("update_time");
        sql.SELECT("tenant_id");
        sql.SELECT("del_flag");
        sql.SELECT("status");
        sql.SELECT("table_type");
        sql.SELECT("main_page_id");
        sql.SELECT("sort_num");
        sql.SELECT("sub_page_fk");
        sql.SELECT("table_desc");
        sql.SELECT("is_main_page");
        sql.SELECT("model_id");
        sql.SELECT("model_name");
        sql.SELECT("module_name");
        sql.FROM("cscp_customize_vpage");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_customize_vpage
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        CscpCustomizeVpage record = (CscpCustomizeVpage) parameter.get("record");
        CscpCustomizeVpageExample example = (CscpCustomizeVpageExample) parameter.get("example");

        SQL sql = new SQL();
        sql.UPDATE("cscp_customize_vpage");

        if (record.getPageId() != null) {
            sql.SET("page_id = #{pageId,jdbcType=BIGINT}");
        }
        if (record.getModuleId() != null) {
            sql.SET("module_id = #{moduleId,jdbcType=BIGINT}");
        }
        if (record.getPageName() != null) {
            sql.SET("page_name = #{pageName,jdbcType=VARCHAR}");
        }
        if (record.getPageType() != null) {
            sql.SET("page_type = #{pageType,jdbcType=VARCHAR}");
        }
        if (record.getPageDatabase() != null) {
            sql.SET("page_database = #{pageDatabase,jdbcType=VARCHAR}");
        }
        if (record.getPageTable() != null) {
            sql.SET("page_table = #{pageTable,jdbcType=VARCHAR}");
        }
        if (record.getPageJson() != null) {
            sql.SET("page_json = #{pageJson,jdbcType=VARCHAR}");
        }
        if (record.getPageOption() != null) {
            sql.SET("page_option = #{pageOption,jdbcType=VARCHAR}");
        }
        if (record.getCreatedBy() != null) {
            sql.SET("created_by = #{createdBy,jdbcType=BIGINT}");
        }
        if (record.getCreatedTime() != null) {
            sql.SET("created_time = #{createdTime,jdbcType=DATE}");
        }
        if (record.getUpdateBy() != null) {
            sql.SET("update_by = #{updateBy,jdbcType=BIGINT}");
        }
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=DATE}");
        }
        if (record.getTenantId() != null) {
            sql.SET("tenant_id = #{tenantId,jdbcType=BIGINT}");
        }
        if (record.getDelFlag() != null) {
            sql.SET("del_flag = #{delFlag,jdbcType=VARCHAR}");
        }
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=VARCHAR}");
        }
        if (record.getTableType() != null) {
            sql.SET("table_type = #{tableType,jdbcType=VARCHAR}");
        }
        if (record.getMainPageId() != null) {
            sql.SET("main_page_id = #{mainPageId,jdbcType=BIGINT}");
        }
        if (record.getSortNum() != null) {
            sql.SET("sort_num = #{sortNum,jdbcType=INTEGER}");
        }
        if (record.getSubPageFk() != null) {
            sql.SET("sub_page_fk = #{subPageFk,jdbcType=VARCHAR}");
        }
        if (record.getTableDesc() != null) {
            sql.SET("table_desc = #{tableDesc,jdbcType=VARCHAR}");
        }
        if (record.getIsMainPage() != null) {
            sql.SET("is_main_page = #{isMainPage,jdbcType=VARCHAR}");
        }
        if (record.getModelId() != null) {
            sql.SET("model_id = #{modelId,jdbcType=BIGINT}");
        }
        if (record.getModelName() != null) {
            sql.SET("model_name = #{modelName,jdbcType=VARCHAR}");
        }
        if (record.getModuleName() != null) {
            sql.SET("module_name = #{moduleName,jdbcType=VARCHAR}");
        }
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_customize_vpage
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("cscp_customize_vpage");
        sql.SET("page_id = #{pageId,jdbcType=BIGINT}");
        sql.SET("module_id = #{moduleId,jdbcType=BIGINT}");
        sql.SET("page_name = #{pageName,jdbcType=VARCHAR}");
        sql.SET("page_type = #{pageType,jdbcType=VARCHAR}");
        sql.SET("page_database = #{pageDatabase,jdbcType=VARCHAR}");
        sql.SET("page_table = #{pageTable,jdbcType=VARCHAR}");
        sql.SET("page_json = #{pageJson,jdbcType=VARCHAR}");
        sql.SET("page_option = #{pageOption,jdbcType=VARCHAR}");
        sql.SET("created_by = #{createdBy,jdbcType=BIGINT}");
        sql.SET("created_time = #{createdTime,jdbcType=DATE}");
        sql.SET("update_by = #{updateBy,jdbcType=BIGINT}");
        sql.SET("update_time = #{updateTime,jdbcType=DATE}");
        sql.SET("tenant_id = #{tenantId,jdbcType=BIGINT}");
        sql.SET("del_flag = #{delFlag,jdbcType=VARCHAR}");
        sql.SET("status = #{status,jdbcType=VARCHAR}");
        sql.SET("table_type = #{tableType,jdbcType=VARCHAR}");
        sql.SET("main_page_id = #{mainPageId,jdbcType=BIGINT}");
        sql.SET("sort_num = #{sortNum,jdbcType=INTEGER}");
        sql.SET("sub_page_fk = #{subPageFk,jdbcType=VARCHAR}");
        sql.SET("table_desc = #{tableDesc,jdbcType=VARCHAR}");
        sql.SET("is_main_page = #{isMainPage,jdbcType=VARCHAR}");
        sql.SET("model_id = #{modelId,jdbcType=BIGINT}");
        sql.SET("model_name = #{modelName,jdbcType=VARCHAR}");
        sql.SET("module_name = #{moduleName,jdbcType=VARCHAR}");

        CscpCustomizeVpageExample example = (CscpCustomizeVpageExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_customize_vpage
     */
    public String updateByPrimaryKeySelective(CscpCustomizeVpage record) {
        SQL sql = new SQL();
        sql.UPDATE("cscp_customize_vpage");

        if (record.getModuleId() != null) {
            sql.SET("module_id = #{moduleId,jdbcType=BIGINT}");
        }
        if (record.getPageName() != null) {
            sql.SET("page_name = #{pageName,jdbcType=VARCHAR}");
        }
        if (record.getPageType() != null) {
            sql.SET("page_type = #{pageType,jdbcType=VARCHAR}");
        }
        if (record.getPageDatabase() != null) {
            sql.SET("page_database = #{pageDatabase,jdbcType=VARCHAR}");
        }
        if (record.getPageTable() != null) {
            sql.SET("page_table = #{pageTable,jdbcType=VARCHAR}");
        }
        if (record.getPageJson() != null) {
            sql.SET("page_json = #{pageJson,jdbcType=VARCHAR}");
        }
        if (record.getPageOption() != null) {
            sql.SET("page_option = #{pageOption,jdbcType=VARCHAR}");
        }
        if (record.getCreatedBy() != null) {
            sql.SET("created_by = #{createdBy,jdbcType=BIGINT}");
        }
        if (record.getCreatedTime() != null) {
            sql.SET("created_time = #{createdTime,jdbcType=DATE}");
        }
        if (record.getUpdateBy() != null) {
            sql.SET("update_by = #{updateBy,jdbcType=BIGINT}");
        }
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=DATE}");
        }
        if (record.getTenantId() != null) {
            sql.SET("tenant_id = #{tenantId,jdbcType=BIGINT}");
        }
        if (record.getDelFlag() != null) {
            sql.SET("del_flag = #{delFlag,jdbcType=VARCHAR}");
        }
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=VARCHAR}");
        }
        if (record.getTableType() != null) {
            sql.SET("table_type = #{tableType,jdbcType=VARCHAR}");
        }
        if (record.getMainPageId() != null) {
            sql.SET("main_page_id = #{mainPageId,jdbcType=BIGINT}");
        }
        if (record.getSortNum() != null) {
            sql.SET("sort_num = #{sortNum,jdbcType=INTEGER}");
        }
        if (record.getSubPageFk() != null) {
            sql.SET("sub_page_fk = #{subPageFk,jdbcType=VARCHAR}");
        }
        if (record.getTableDesc() != null) {
            sql.SET("table_desc = #{tableDesc,jdbcType=VARCHAR}");
        }
        if (record.getIsMainPage() != null) {
            sql.SET("is_main_page = #{isMainPage,jdbcType=VARCHAR}");
        }
        if (record.getModelId() != null) {
            sql.SET("model_id = #{modelId,jdbcType=BIGINT}");
        }
        if (record.getModelName() != null) {
            sql.SET("model_name = #{modelName,jdbcType=VARCHAR}");
        }
        if (record.getModuleName() != null) {
            sql.SET("module_name = #{moduleName,jdbcType=VARCHAR}");
        }
        sql.WHERE("page_id = #{pageId,jdbcType=BIGINT}");

        return sql.toString();
    }


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_customize_vpage
     */
    protected void applyWhere(SQL sql, CscpCustomizeVpageExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }

        String parmPhrase1;
        String parmPhrase1Th;
        String parmPhrase2;
        String parmPhrase2Th;
        String parmPhrase3;
        String parmPhrase3Th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }

        StringBuilder sb = new StringBuilder();
        List<CscpCustomizeVpageExample.Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            CscpCustomizeVpageExample.Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }

                sb.append('(');
                List<CscpCustomizeVpageExample.Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    CscpCustomizeVpageExample.Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }

                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1Th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2Th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3Th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }

        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}
