package com.ctsi.ssdc.gen.repository;

import org.apache.commons.lang3.StringUtils;
import com.ctsi.ssdc.gen.domain.CscpHxFormTable;
import com.ctsi.ssdc.gen.domain.CscpHxFormTableExample.Criteria;
import com.ctsi.ssdc.gen.domain.CscpHxFormTableExample.Criterion;
import com.ctsi.ssdc.gen.domain.CscpHxFormTableExample;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.apache.ibatis.jdbc.SQL;

/**
 * @author ctsi-biyi-generator
*/
public class CscpHxFormTableSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_hx_form_table
     *
     * @mbg.generated Thu Feb 17 14:10:22 CST 2022
     */
    public String countByExample(CscpHxFormTableExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("cscp_hx_form_table");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_hx_form_table
     *
     * @mbg.generated Thu Feb 17 14:10:22 CST 2022
     */
    public String deleteByExample(CscpHxFormTableExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("cscp_hx_form_table");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_hx_form_table
     *
     * @mbg.generated Thu Feb 17 14:10:22 CST 2022
     */
    public String insertSelective(CscpHxFormTable record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("cscp_hx_form_table");
        
        if (record.getTableId() != null) {
            sql.VALUES("table_id", "#{tableId,jdbcType=BIGINT}");
        }
        
        if (record.getTableName() != null) {
            sql.VALUES("table_name", "#{tableName,jdbcType=VARCHAR}");
        }
        
        if (record.getTableContent() != null) {
            sql.VALUES("table_content", "#{tableContent,jdbcType=VARCHAR}");
        }
        
        if (record.getDbType() != null) {
            sql.VALUES("db_type", "#{dbType,jdbcType=INTEGER}");
        }
        
        if (record.getPersistenceType() != null) {
            sql.VALUES("persistence_type", "#{persistenceType,jdbcType=INTEGER}");
        }
        
        if (record.getIsDbSynch() != null) {
            sql.VALUES("is_db_synch", "#{isDbSynch,jdbcType=INTEGER}");
        }
        
        if (record.getFormType() != null) {
            sql.VALUES("form_type", "#{formType,jdbcType=INTEGER}");
        }
        
        if (record.getSubTableName() != null) {
            sql.VALUES("sub_table_name", "#{subTableName,jdbcType=VARCHAR}");
        }
        
        if (record.getSubTableFkName() != null) {
            sql.VALUES("sub_table_fk_name", "#{subTableFkName,jdbcType=VARCHAR}");
        }
        
        if (record.getPackageName() != null) {
            sql.VALUES("package_name", "#{packageName,jdbcType=VARCHAR}");
        }
        
        if (record.getGenType() != null) {
            sql.VALUES("gen_type", "#{genType,jdbcType=INTEGER}");
        }
        
        if (record.getGenPath() != null) {
            sql.VALUES("gen_path", "#{genPath,jdbcType=VARCHAR}");
        }
        
        if (record.getOptions() != null) {
            sql.VALUES("options", "#{options,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getFormSuite() != null) {
            sql.VALUES("form_suite", "#{formSuite,jdbcType=BIGINT}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_hx_form_table
     *
     * @mbg.generated Thu Feb 17 14:10:22 CST 2022
     */
    public String selectByExample(CscpHxFormTableExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("table_id");
        } else {
            sql.SELECT("table_id");
        }
        sql.SELECT("table_name");
        sql.SELECT("table_content");
        sql.SELECT("db_type");
        sql.SELECT("persistence_type");
        sql.SELECT("is_db_synch");
        sql.SELECT("form_type");
        sql.SELECT("sub_table_name");
        sql.SELECT("sub_table_fk_name");
        sql.SELECT("package_name");
        sql.SELECT("gen_type");
        sql.SELECT("gen_path");
        sql.SELECT("options");
        sql.SELECT("remark");
        sql.SELECT("form_suite");
        sql.FROM("cscp_hx_form_table");
        applyWhere(sql, example, false);

        // 查询时, 新增的数据排在前列
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }else{
            sql.ORDER_BY("table_id desc");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_hx_form_table
     *
     * @mbg.generated Thu Feb 17 14:10:22 CST 2022
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        CscpHxFormTable record = (CscpHxFormTable) parameter.get("record");
        CscpHxFormTableExample example = (CscpHxFormTableExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("cscp_hx_form_table");
        
        if (record.getTableId() != null) {
            sql.SET("table_id = #{record.tableId,jdbcType=BIGINT}");
        }
        
        if (record.getTableName() != null) {
            sql.SET("table_name = #{record.tableName,jdbcType=VARCHAR}");
        }
        
        if (record.getTableContent() != null) {
            sql.SET("table_content = #{record.tableContent,jdbcType=VARCHAR}");
        }
        
        if (record.getDbType() != null) {
            sql.SET("db_type = #{record.dbType,jdbcType=INTEGER}");
        }
        
        if (record.getPersistenceType() != null) {
            sql.SET("persistence_type = #{record.persistenceType,jdbcType=INTEGER}");
        }
        
        if (record.getIsDbSynch() != null) {
            sql.SET("is_db_synch = #{record.isDbSynch,jdbcType=INTEGER}");
        }
        
        if (record.getFormType() != null) {
            sql.SET("form_type = #{record.formType,jdbcType=INTEGER}");
        }
        
        if (record.getSubTableName() != null) {
            sql.SET("sub_table_name = #{record.subTableName,jdbcType=VARCHAR}");
        }
        
        if (record.getSubTableFkName() != null) {
            sql.SET("sub_table_fk_name = #{record.subTableFkName,jdbcType=VARCHAR}");
        }
        
        if (record.getPackageName() != null) {
            sql.SET("package_name = #{record.packageName,jdbcType=VARCHAR}");
        }
        
        if (record.getGenType() != null) {
            sql.SET("gen_type = #{record.genType,jdbcType=INTEGER}");
        }
        
        if (record.getGenPath() != null) {
            sql.SET("gen_path = #{record.genPath,jdbcType=VARCHAR}");
        }
        
        if (record.getOptions() != null) {
            sql.SET("options = #{record.options,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getFormSuite() != null) {
            sql.SET("form_suite = #{record.formSuite,jdbcType=BIGINT}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_hx_form_table
     *
     * @mbg.generated Thu Feb 17 14:10:22 CST 2022
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("cscp_hx_form_table");
        
        sql.SET("table_id = #{record.tableId,jdbcType=BIGINT}");
        sql.SET("table_name = #{record.tableName,jdbcType=VARCHAR}");
        sql.SET("table_content = #{record.tableContent,jdbcType=VARCHAR}");
        sql.SET("db_type = #{record.dbType,jdbcType=INTEGER}");
        sql.SET("persistence_type = #{record.persistenceType,jdbcType=INTEGER}");
        sql.SET("is_db_synch = #{record.isDbSynch,jdbcType=INTEGER}");
        sql.SET("form_type = #{record.formType,jdbcType=INTEGER}");
        sql.SET("sub_table_name = #{record.subTableName,jdbcType=VARCHAR}");
        sql.SET("sub_table_fk_name = #{record.subTableFkName,jdbcType=VARCHAR}");
        sql.SET("package_name = #{record.packageName,jdbcType=VARCHAR}");
        sql.SET("gen_type = #{record.genType,jdbcType=INTEGER}");
        sql.SET("gen_path = #{record.genPath,jdbcType=VARCHAR}");
        sql.SET("options = #{record.options,jdbcType=VARCHAR}");
        sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("form_suite = #{record.formSuite,jdbcType=BIGINT}");
        
        CscpHxFormTableExample example = (CscpHxFormTableExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_hx_form_table
     *
     * @mbg.generated Thu Feb 17 14:10:22 CST 2022
     */
    public String updateByPrimaryKeySelective(CscpHxFormTable record) {
        SQL sql = new SQL();
        sql.UPDATE("cscp_hx_form_table");
        
        if (record.getTableName() != null) {
            sql.SET("table_name = #{tableName,jdbcType=VARCHAR}");
        }
        
        if (record.getTableContent() != null) {
            sql.SET("table_content = #{tableContent,jdbcType=VARCHAR}");
        }
        
        if (record.getDbType() != null) {
            sql.SET("db_type = #{dbType,jdbcType=INTEGER}");
        }
        
        if (record.getPersistenceType() != null) {
            sql.SET("persistence_type = #{persistenceType,jdbcType=INTEGER}");
        }
        
        if (record.getIsDbSynch() != null) {
            sql.SET("is_db_synch = #{isDbSynch,jdbcType=INTEGER}");
        }
        
        if (record.getFormType() != null) {
            sql.SET("form_type = #{formType,jdbcType=INTEGER}");
        }
        
        if (record.getSubTableName() != null) {
            sql.SET("sub_table_name = #{subTableName,jdbcType=VARCHAR}");
        }
        
        if (record.getSubTableFkName() != null) {
            sql.SET("sub_table_fk_name = #{subTableFkName,jdbcType=VARCHAR}");
        }
        
        if (record.getPackageName() != null) {
            sql.SET("package_name = #{packageName,jdbcType=VARCHAR}");
        }
        
        if (record.getGenType() != null) {
            sql.SET("gen_type = #{genType,jdbcType=INTEGER}");
        }
        
        if (record.getGenPath() != null) {
            sql.SET("gen_path = #{genPath,jdbcType=VARCHAR}");
        }
        
        if (record.getOptions() != null) {
            sql.SET("options = #{options,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getFormSuite() != null) {
            sql.SET("form_suite = #{formSuite,jdbcType=BIGINT}");
        }
        
        sql.WHERE("table_id = #{tableId,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_hx_form_table
     *
     * @mbg.generated Thu Feb 17 14:10:22 CST 2022
     */
    protected void applyWhere(SQL sql, CscpHxFormTableExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1Th;
        String parmPhrase2;
        String parmPhrase2Th;
        String parmPhrase3;
        String parmPhrase3Th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1Th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2Th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3Th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}