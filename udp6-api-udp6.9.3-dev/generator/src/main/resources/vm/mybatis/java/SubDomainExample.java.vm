##设置全局变量
#set($subClassName = $table.subTable.className)
#set($subclassName = $table.subTable.className.substring(0,1).toLowerCase() + $table.subTable.className.substring(1))
#set($subtableName = $table.subTable.tableName)
#set($subcolumns = $table.subTable.columns)
package ${packageName}.domain;

import com.ctsi.ssdc.criteria.*;

#foreach ($import in $subImportList)
import ${import};
#end
import com.ctsi.ssdc.example.BaseExample;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.annotations.ApiParam;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang3.StringUtils;

/**
 * ${subClassName}Example
 *
 * @author ${author}
 * @date ${datetime}
 */

public class ${subClassName}Example extends BaseExample {

    /**
     * This field was generated by  Generator.
     * This field corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    protected String orderByClause;

    /**
     * This field was generated by  Generator.
     * This field corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    protected boolean distinct;

    /**
     * This field was generated by  Generator.
     * This field corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by  Generator.
     * This field corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    private static final String LIKE_FORMAT = "%%%s%%";


#foreach ($column in $subcolumns)
        /**
         *
         * This field was generated by  Generator.
         * This field corresponds to the database column ${subtableName}.${column.columnName}
         *
         * @date ${datetime}
         */
    private ${column.javaType}Criteria ${column.javaField};

#end

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public ${subClassName}Example() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    @Override
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }


#foreach ($column in $subcolumns)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public ${column.javaType}Criteria get${AttrName}() {
        return $column.javaField;
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
    public void set${AttrName}(${column.javaType}Criteria $column.javaField) {
        this. ${column.javaField} = ${column.javaField};
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     *
     * @date ${datetime}
     */
###if($column.javaType == "Long"||$column.javaType == "Integer" ||$column.javaType == "ZonedDateTime"||$column.javaType == "Date")
##    private void build${AttrName}Criteria(Criteria criteria) {
##        if (this.get${AttrName}() == null) {
##            return;
##        }
##        if (this.get${AttrName}().getEquals() != null) {
##            criteria.and${AttrName}EqualTo(this.get${AttrName}().getEquals());
##        } else {
##            if (this.get${AttrName}().getGreaterOrEqualThan() != null) {
##                criteria.and${AttrName}GreaterThanOrEqualTo(this.get${AttrName}().getGreaterOrEqualThan());
##            }
##            if (this.get${AttrName}().getLessOrEqualThan() != null) {
##                criteria.and${AttrName}LessThanOrEqualTo(this.get${AttrName}().getLessOrEqualThan());
##            }
##        }
##    }
###else
#if($column.javaType == "String" )
    private void build${AttrName}Criteria(Criteria criteria) {
        if (this.get${AttrName}() == null) {
            return;
        }
        if (this.get${AttrName}().getEquals() != null) {
            criteria.and${AttrName}EqualTo(this.get${AttrName}().getEquals());
        } else {
            if (StringUtils.isNotBlank(this.get${AttrName}().getContains())) {
                criteria.and${AttrName}Like(String.format(LIKE_FORMAT, this.get${AttrName}().getContains()));
            }
        }
    }
#else
    private void build${AttrName}Criteria(Criteria criteria) {
        if (this.get${AttrName}() == null) {
            return;
        }
        if (this.get${AttrName}().getEquals() != null) {
            criteria.and${AttrName}EqualTo(this.get${AttrName}().getEquals());
        } else {
            if (this.get${AttrName}().getGreaterOrEqualThan() != null) {
                criteria.and${AttrName}GreaterThanOrEqualTo(this.get${AttrName}().getGreaterOrEqualThan());
            }
            if (this.get${AttrName}().getLessOrEqualThan() != null) {
                criteria.and${AttrName}LessThanOrEqualTo(this.get${AttrName}().getLessOrEqualThan());
            }
        }
    }
#end
#end
    /**
      * This method was generated by  Generator.
      * This method corresponds to the database table cscp_hx_form_column
      *
      * @date Thu Feb 17 14:02:06 CST 2022
      */
    @Override
    public Object buildCriteria() {
        Criteria criteria = this.createCriteria();
#foreach ($column in $subcolumns)
    ##    private $column.javaType $column.javaField;
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    this.build${AttrName}Criteria(criteria);
#end
        return criteria;
    }

    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

#foreach ($column in $subcolumns)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})

        public Criteria and${AttrName}IsNull() {
            addCriterion("${column.columnName} is null");
            return (Criteria) this;
        }

        public Criteria and${AttrName}IsNotNull() {
            addCriterion("${column.columnName} is not null");
            return (Criteria) this;
        }

        public Criteria and${AttrName}EqualTo(${column.javaType} value) {
            addCriterion("${column.columnName} =", value, "${column.javaField}");
            return (Criteria) this;
        }

        public Criteria and${AttrName}NotEqualTo(${column.javaType} value) {
            addCriterion("${column.columnName} <>", value, "${column.javaField}");
            return (Criteria) this;
        }

        public Criteria and${AttrName}GreaterThan(${column.javaType} value) {
            addCriterion("${column.columnName} >", value, "${column.javaField}");
            return (Criteria) this;
        }

        public Criteria and${AttrName}GreaterThanOrEqualTo(${column.javaType} value) {
            addCriterion("${column.columnName} >=", value, "${column.javaField}");
            return (Criteria) this;
        }

        public Criteria and${AttrName}LessThan(${column.javaType} value) {
            addCriterion("${column.columnName} <", value, "${column.javaField}");
            return (Criteria) this;
        }

        public Criteria and${AttrName}LessThanOrEqualTo(${column.javaType} value) {
            addCriterion("${column.columnName} <=", value, "${column.javaField}");
            return (Criteria) this;
        }

#if($column.javaType == "String")
        public Criteria and${AttrName}Like(${column.javaType} value) {
            addCriterion("${column.columnName} like", value, "${column.javaField}");
            return (Criteria) this;
        }

        public Criteria and${AttrName}NotLike(${column.javaType} value) {
            addCriterion("${column.columnName} not like", value, "${column.javaField}");
            return (Criteria) this;
        }

#end
        public Criteria and${AttrName}In(List<${column.javaType}> values) {
            addCriterion("${column.columnName} in", values, "${column.javaField}");
            return (Criteria) this;
        }

        public Criteria and${AttrName}NotIn(List<${column.javaType}> values) {
            addCriterion("${column.columnName} not in", values, "${column.javaField}");
            return (Criteria) this;
        }

        public Criteria and${AttrName}Between(${column.javaType} value1, ${column.javaType} value2) {
            addCriterion("${column.columnName} between", value1, value2, "${column.javaField}");
            return (Criteria) this;
        }

        public Criteria and${AttrName}NotBetween(${column.javaType} value1, ${column.javaType} value2) {
            addCriterion("${column.columnName} not between", value1, value2, "${column.javaField}");
            return (Criteria) this;
        }
#end
    }

    /**
     * This class was generated by  Generator.
     * This class corresponds to the database table  ${subtableName}
     *
     * @date do_not_delete_during_merge ${datetime}
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by  Generator.
     * This class corresponds to the database table  ${subtableName}
     *
     * @date ${datetime}
     */
    public static class Criterion {
        @ApiParam(hidden = true)
        private String condition;

        @ApiParam(hidden = true)
        private Object value;

        @ApiParam(hidden = true)
        private Object secondValue;

        @ApiParam(hidden = true)
        private boolean noValue;

        @ApiParam(hidden = true)
        private boolean singleValue;

        @ApiParam(hidden = true)
        private boolean betweenValue;

        @ApiParam(hidden = true)
        private boolean listValue;

        @ApiParam(hidden = true)
        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }

    }
}
