##设置全局变量
#set($subClassName = $table.subTable.className)
#set($subclassName = $table.subTable.className.substring(0,1).toLowerCase() + $table.subTable.className.substring(1))
#set($subtableName = $table.subTable.tableName)
#set($subcolumns = $table.subTable.columns)
#set($subpkColumn = $table.subTable.pkColumn)
package ${packageName}.repository;

import ${packageName}.domain.${subClassName};
import ${packageName}.domain.${subClassName}Example.Criteria;
import ${packageName}.domain.${subClassName}Example.Criterion;
import ${packageName}.domain.${subClassName}Example;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;


/**
 * ${subClassName}SqlProvider
 *
 * @author ${author}
 * @date ${datetime}
*/

public class ${subClassName}SqlProvider {

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     */
    public String countByExample(${subClassName}Example example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("${subtableName}");
        applyWhere(sql, example, false);
        return sql.toString();
    }


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     */
    public String deleteByExample(${subClassName}Example example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("${subtableName}");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     */
    public String insertSelective(${subClassName} record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("${subtableName}");

#foreach ($column in $subcolumns)
#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$column.javaField)
#else
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#end
        if (record.get$AttrName() != null) {
            sql.VALUES("$column.columnName", "#{$column.javaField,jdbcType=$column.jdbcType}");
        }
#end

        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     */
    public String selectByExample(${subClassName}Example example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("$subpkColumn.columnName");
        } else {
            sql.SELECT("$subpkColumn.columnName");
        }
#foreach ($column in $subcolumns)
#if($column.columnName != $subpkColumn.columnName)
        sql.SELECT("$column.columnName");
#end
#end
        sql.FROM("${subtableName}");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        ${subClassName} record = (${subClassName}) parameter.get("record");
        ${subClassName}Example example = (${subClassName}Example) parameter.get("example");

        SQL sql = new SQL();
        sql.UPDATE("${subtableName}");

#foreach ($column in $subcolumns)
#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$column.javaField)
#else
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#end
        if (record.get$AttrName() != null) {
        sql.SET("$column.columnName = #{$column.javaField,jdbcType=$column.jdbcType}");
        }
#end
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("${subtableName}");
#foreach ($column in $subcolumns)
        sql.SET("$column.columnName = #{$column.javaField,jdbcType=$column.jdbcType}");
#end

        ${subClassName}Example example = (${subClassName}Example) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     */
    public String updateByPrimaryKeySelective(${subClassName} record) {
        SQL sql = new SQL();
        sql.UPDATE("${subtableName}");

#foreach ($column in $subcolumns)
#if($column.columnName != $subpkColumn.columnName)
#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$column.javaField)
#else
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#end
        if (record.get$AttrName() != null) {
            sql.SET("$column.columnName = #{$column.javaField,jdbcType=$column.jdbcType}");
        }
#end
#end
        sql.WHERE("$subpkColumn.columnName = #{$subpkColumn.javaField,jdbcType=$subpkColumn.jdbcType}");

        return sql.toString();
    }


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${subtableName}
     */
    protected void applyWhere(SQL sql, ${subClassName}Example example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }

        String parmPhrase1;
        String parmPhrase1Th;
        String parmPhrase2;
        String parmPhrase2Th;
        String parmPhrase3;
        String parmPhrase3Th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }

        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }

                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }

                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1Th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2Th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3Th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }

        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}
