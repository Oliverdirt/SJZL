package ${packageName}.repository;

import ${packageName}.domain.${ClassName};
import ${packageName}.domain.${ClassName}Example;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

/**
 * ${ClassName}Repository
 *
 * @author ${author}
 * @date ${datetime}
 */

@Mapper
public interface ${ClassName}Repository extends com.ctsi.ssdc.repository.BaseRepository<${ClassName}, Long, ${ClassName}Example> {
    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @SelectProvider(type=${ClassName}SqlProvider.class, method="countByExample")
    @Override
    long countByExample(${ClassName}Example example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @DeleteProvider(type=${ClassName}SqlProvider.class, method="deleteByExample")
    @Override
    int deleteByExample(${ClassName}Example example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @Delete({
            "delete from ${tableName}",
            "where ${pkColumn.columnName} = #{${pkColumn.javaField},jdbcType=BIGINT}"
    })
    @Override
    int deleteByPrimaryKey(Long ${pkColumn.javaField});

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     *
     * @date ${datetime}
     */
    @Insert({
            "insert into ${tableName} (",
#foreach($column in $columns)
            "$column.columnName#if($velocityCount != $columns.size()),#end",
#end
            ") values (",
#foreach($column in $columns)
            "#{$column.javaField,jdbcType=$column.jdbcType}#if($velocityCount != $columns.size()), ",#else",
#end

#end            ")"

    })
    @Override
    int insert(${ClassName} record);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @InsertProvider(type=${ClassName}SqlProvider.class, method="insertSelective")
    @Override
    int insertSelective(${ClassName} record);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @SelectProvider(type=${ClassName}SqlProvider.class, method="selectByExample")
    @Results({
#foreach($column in $columns)
            @Result(column="$column.columnName", property="$column.javaField", jdbcType=JdbcType.$column.jdbcType#if($velocityCount == 1),id=true #end)#if($velocityCount != $columns.size()),
#end
#end

    })

    @Override
    List<${ClassName}> selectByExample(${ClassName}Example example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @Select({
            "select",
#foreach($column in $columns)
            "$column.columnName#if($velocityCount != $columns.size()),#end",
#end
            "from ${tableName}",
            "where ${pkColumn.columnName} = #{${pkColumn.javaField},jdbcType=BIGINT}"
    })
    @Results({
#foreach($column in $columns)
            @Result(column="$column.columnName", property="$column.javaField", jdbcType=JdbcType.$column.jdbcType#if($velocityCount == 1),id=true #end)#if($velocityCount != $columns.size()),
#end
#end

    })
    @Override
    ${ClassName} selectByPrimaryKey(Long ${pkColumn.javaField});

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @UpdateProvider(type=${ClassName}SqlProvider.class, method="updateByExampleSelective")
    @Override
    int updateByExampleSelective(@Param("record") ${ClassName} record, @Param("example") ${ClassName}Example example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @UpdateProvider(type=${ClassName}SqlProvider.class, method="updateByExample")
    @Override
    int updateByExample(@Param("record") ${ClassName} record, @Param("example") ${ClassName}Example example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     *@date ${datetime}
     */
    @UpdateProvider(type=${ClassName}SqlProvider.class, method="updateByPrimaryKeySelective")
    @Override
    int updateByPrimaryKeySelective(${ClassName} record);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @Update({
            "update ${tableName}",
            "set ",
#foreach($column in $columns)
            "$column.columnName = #{$column.javaField,jdbcType=$column.jdbcType}#if($velocityCount != $columns.size()),",#else",
#end

#end
            "where ${pkColumn.columnName} = #{${pkColumn.javaField},jdbcType=BIGINT}"
    })
    @Override
    int updateByPrimaryKey(${ClassName} record);

    /**
     * 批量删除
     * @param ${pkColumn.javaField}s
     */
    @Delete("<script>" +
            "delete from ${tableName} where ${pkColumn.columnName} in" +
            "<foreach collection=\"${pkColumn.javaField}s\" item=\"${pkColumn.javaField}\" open=\"(\" separator=\",\" close=\")\">" +
            "#{${pkColumn.javaField}}" +
            "</foreach>" +
            "</script>")
    void deleteByIds(@Param("${pkColumn.javaField}s") List<Long> ${pkColumn.javaField}s);

#if($table.formType == 2)
    /**
     *
     * This method corresponds to the database table ${tableName}
     *
     * @date ${datetime}
     */
    @Select({
        "select",
#foreach($column in $columns)
        "$column.columnName#if($velocityCount != $columns.size()),#end",
#end
        "from ${tableName}",
        "where ${treeParentCodeColumnName} = #{${treeParentCode},jdbcType=BIGINT} limit 1"
    })
    @Results({
#foreach($column in $columns)
        @Result(column="$column.columnName", property="$column.javaField", jdbcType=JdbcType.$column.jdbcType#if($velocityCount == 1),id=true #end)#if($velocityCount != $columns.size()),
#end
#end

    })
    ${ClassName} findOneBy${TreeParentCode}(Long ${treeParentCode});
#end

}





