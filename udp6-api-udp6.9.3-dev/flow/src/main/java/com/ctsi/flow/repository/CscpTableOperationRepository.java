package com.ctsi.flow.repository;

import com.ctsi.flow.param.model.CscpTableOperation;
import com.ctsi.flow.param.model.CscpTableOperationExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

/**
 * CscpTableOperationRepository
 *
 * @author hx
 * @date 2022-07-26 16:50:51
 */

@Mapper
public interface CscpTableOperationRepository extends com.ctsi.ssdc.repository.BaseRepository<CscpTableOperation, Long, CscpTableOperationExample> {
    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     * @date 2022-07-26 16:50:51
     */
    @SelectProvider(type=CscpTableOperationSqlProvider.class, method="countByExample")
    @Override
    long countByExample(CscpTableOperationExample example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     * @date 2022-07-26 16:50:51
     */
    @DeleteProvider(type=CscpTableOperationSqlProvider.class, method="deleteByExample")
    @Override
    int deleteByExample(CscpTableOperationExample example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     * @date 2022-07-26 16:50:51
     */
    @Delete({
            "delete from cscp_table_operation",
            "where id = #{id,jdbcType=BIGINT}"
    })
    @Override
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     *
     * @date 2022-07-26 16:50:51
     */
    @Insert({
            "insert into cscp_table_operation (",
            "id,",
            "field_id,",
            "form_id,",
            "field_name,",
            "task_definition_Key,",
            "perm,",
            "task_definition_flag",
            ") values (",
            "#{id,jdbcType=BIGINT}, ",
            "#{fieldId,jdbcType=VARCHAR}, ",
            "#{formId,jdbcType=VARCHAR}, ",
            "#{fieldName,jdbcType=VARCHAR}, ",
            "#{taskDefinitionKey,jdbcType=VARCHAR}, ",
            "#{perm,jdbcType=VARCHAR},",
            "#{taskDefinitionFlag,jdbcType=VARCHAR}",

            ")"

    })
    @Override
    int insert(CscpTableOperation record);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     * @date 2022-07-26 16:50:51
     */
    @InsertProvider(type=CscpTableOperationSqlProvider.class, method="insertSelective")
    @Override
    int insertSelective(CscpTableOperation record);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     * @date 2022-07-26 16:50:51
     */
    @SelectProvider(type=CscpTableOperationSqlProvider.class, method="selectByExample")
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.BIGINT,id=true ),
            @Result(column="field_id", property="fieldId", jdbcType=JdbcType.VARCHAR),
            @Result(column="form_id", property="formId", jdbcType=JdbcType.VARCHAR),
            @Result(column="field_name", property="fieldName", jdbcType=JdbcType.VARCHAR),
            @Result(column="task_definition_Key", property="taskDefinitionKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="perm", property="perm", jdbcType=JdbcType.VARCHAR)
    })

    @Override
    List<CscpTableOperation> selectByExample(CscpTableOperationExample example);

    @SelectProvider(type=CscpTableOperationSqlProvider.class, method="selectByExample")
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.BIGINT,id=true ),
            @Result(column="field_id", property="fieldId", jdbcType=JdbcType.VARCHAR),
            @Result(column="form_id", property="formId", jdbcType=JdbcType.VARCHAR),
            @Result(column="field_name", property="fieldName", jdbcType=JdbcType.VARCHAR),
            @Result(column="task_definition_Key", property="taskDefinitionKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="perm", property="perm", jdbcType=JdbcType.VARCHAR)
    })

    CscpTableOperation selectOneByExample(CscpTableOperationExample example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     * @date 2022-07-26 16:50:51
     */
    @Select({
            "select",
            "id,",
            "field_id,",
            "form_id,",
            "field_name,",
            "task_definition_Key,",
            "perm",
            "from cscp_table_operation",
            "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.BIGINT,id=true ),
            @Result(column="field_id", property="fieldId", jdbcType=JdbcType.VARCHAR),
            @Result(column="form_id", property="formId", jdbcType=JdbcType.VARCHAR),
            @Result(column="field_name", property="fieldName", jdbcType=JdbcType.VARCHAR),
            @Result(column="task_definition_Key", property="taskDefinitionKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="perm", property="perm", jdbcType=JdbcType.VARCHAR)
    })
    @Override
    CscpTableOperation selectByPrimaryKey(Long id);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     * @date 2022-07-26 16:50:51
     */
    @UpdateProvider(type=CscpTableOperationSqlProvider.class, method="updateByExampleSelective")
    @Override
    int updateByExampleSelective(@Param("record") CscpTableOperation record, @Param("example") CscpTableOperationExample example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     * @date 2022-07-26 16:50:51
     */
    @UpdateProvider(type=CscpTableOperationSqlProvider.class, method="updateByExample")
    @Override
    int updateByExample(@Param("record") CscpTableOperation record, @Param("example") CscpTableOperationExample example);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     *@date 2022-07-26 16:50:51
     */
    @UpdateProvider(type=CscpTableOperationSqlProvider.class, method="updateByPrimaryKeySelective")
    @Override
    int updateByPrimaryKeySelective(CscpTableOperation record);

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_table_operation
     *
     * @date 2022-07-26 16:50:51
     */
    @Update({
            "update cscp_table_operation",
            "set ",
            "id = #{id,jdbcType=BIGINT},",
            "field_id = #{fieldId,jdbcType=VARCHAR},",
            "form_id = #{formId,jdbcType=VARCHAR},",
            "field_name = #{fieldName,jdbcType=VARCHAR},",
            "task_definition_Key = #{taskDefinitionKey,jdbcType=VARCHAR},",
            "perm = #{perm,jdbcType=VARCHAR}",

            "where id = #{id,jdbcType=BIGINT}"
    })
    @Override
    int updateByPrimaryKey(CscpTableOperation record);

    /**
     * 批量删除
     * @param ids
     */
    @Delete("<script>" +
            "delete from cscp_table_operation where id in" +
            "<foreach collection=\"ids\" item=\"id\" open=\"(\" separator=\",\" close=\")\">" +
            "#{id}" +
            "</foreach>" +
            "</script>")
    void deleteByIds(@Param("ids") List<Long> ids);


}





