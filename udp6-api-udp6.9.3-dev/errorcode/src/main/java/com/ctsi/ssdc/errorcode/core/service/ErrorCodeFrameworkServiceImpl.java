package com.ctsi.ssdc.errorcode.core.service;


import cn.hutool.core.collection.CollUtil;
import com.ctsi.ssdc.errorcode.core.dto.ErrorCodeAutoGenerateReqDTO;
import com.ctsi.ssdc.errorcode.domain.CscpErrorCode;
import com.ctsi.ssdc.errorcode.exception.enums.ErrorCodeTypeEnum;
import com.ctsi.ssdc.errorcode.repository.CscpErrorCodeRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import javax.annotation.Resource;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.ctsi.ssdc.errorcode.util.CollectionUtils.convertMap;
import static com.ctsi.ssdc.errorcode.util.CollectionUtils.convertSet;

/**
 * 错误码 Framework Service 接口
 *
 * @author hx
 */
@Service
@Validated
@Slf4j
public class ErrorCodeFrameworkServiceImpl implements ErrorCodeFrameworkService{

    @Resource
    private CscpErrorCodeRepository errorCodeRepository;
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void autoGenerateErrorCodes(List<ErrorCodeAutoGenerateReqDTO> autoGenerateDtos) {
        if (CollUtil.isEmpty(autoGenerateDtos)) {
            return;
        }
        // 获得错误码
        Set<Integer> codes = convertSet(autoGenerateDtos, ErrorCodeAutoGenerateReqDTO::getCode);
        ArrayList<Integer> newcodes = new ArrayList<>();
        newcodes.addAll(codes);
        List<CscpErrorCode> errorCodes = errorCodeRepository.selectListByCodes(newcodes);
        Map<Integer, CscpErrorCode> errorCodeMap = convertMap(errorCodes, CscpErrorCode::getCode);

        // 遍历 autoGenerateBOs 数组，逐个插入或更新。考虑到每次量级不大，就不走批量了
        autoGenerateDtos.forEach(autoGenerateDTO -> {
            CscpErrorCode cscpErrorCode = errorCodeMap.get(autoGenerateDTO.getCode());
            // 不存在，则进行新增
            if (cscpErrorCode == null) {
                cscpErrorCode = new CscpErrorCode();
                cscpErrorCode.setApplicationName(autoGenerateDTO.getApplicationName());
                cscpErrorCode.setCode(autoGenerateDTO.getCode());
                cscpErrorCode.setCodeMessage(autoGenerateDTO.getCodeMessage());
                cscpErrorCode.setCodeType(String.valueOf(ErrorCodeTypeEnum.AUTO_GENERATION.getCodeType()));
                errorCodeRepository.insert(cscpErrorCode);
                return;
            }
            // 存在，则进行更新。更新有三个前置条件：
            // 条件 1. 只更新自动生成的错误码，即 Type 为 ErrorCodeTypeEnum.AUTO_GENERATION
            if (!(String.valueOf(ErrorCodeTypeEnum.AUTO_GENERATION.getCodeType())).equals(cscpErrorCode.getCodeType())) {
                return;
            }
            // 条件 2. 分组 applicationName 必须匹配，避免存在错误码冲突的情况
            if (!autoGenerateDTO.getApplicationName().equals(cscpErrorCode.getApplicationName())) {
                log.error("[autoGenerateErrorCodes][自动创建({}/{}) 错误码失败，数据库中已经存在({}/{})]",
                        autoGenerateDTO.getCode(), autoGenerateDTO.getApplicationName(),
                        cscpErrorCode.getCode(), cscpErrorCode.getApplicationName());
                return;
            }
            // 条件 3. 错误码编码存在差异
            if (autoGenerateDTO.getCode().equals(cscpErrorCode.getCode())) {
                return;
            }
            CscpErrorCode errorCodeDo1 = new CscpErrorCode();
            errorCodeDo1.setCodeId(cscpErrorCode.getCodeId());
            errorCodeDo1.setCodeMessage(autoGenerateDTO.getCodeMessage());
            errorCodeDo1.setCodeType("1");
            errorCodeDo1.setCode(autoGenerateDTO.getCode());
            errorCodeDo1.setApplicationName(autoGenerateDTO.getApplicationName());
            // 最终匹配，进行更新
            errorCodeRepository.updateByPrimaryKey(errorCodeDo1);
        });
    }

    @Override
    public List<CscpErrorCode> getErrorCodeList(String applicationName, ZonedDateTime minUpdateTime) {
        return errorCodeRepository.selectListByApplicationNameAndUpdateTimeGt(
                applicationName, minUpdateTime);
    }

}
