package com.ctsi.ssdc.admin.repository;

import com.ctsi.ssdc.admin.domain.CscpNotice;
import com.ctsi.ssdc.admin.domain.CscpNoticeExample;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

/**
 * @author ctsi-biyi-generator
 */
@Mapper
public interface CscpNoticeRepository extends com.ctsi.ssdc.repository.BaseRepository<CscpNotice, Long, CscpNoticeExample> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @SelectProvider(type=CscpNoticeSqlProvider.class, method="countByExample")
    @Override
    long countByExample(CscpNoticeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @DeleteProvider(type=CscpNoticeSqlProvider.class, method="deleteByExample")
    @Override
    int deleteByExample(CscpNoticeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @Delete({
            "delete from cscp_notice",
            "where notice_id = #{noticeId,jdbcType=BIGINT}"
    })
    @Override
    int deleteByPrimaryKey(Long noticeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @Insert({
            "insert into cscp_notice (notice_id, notice_title, ",
            "notice_type, notice_content, ",
            "status, create_by, create_time, ",
            "update_by, update_time, ",
            "remark, tenant_id)",
            "values (#{noticeId,jdbcType=BIGINT}, #{noticeTitle,jdbcType=VARCHAR}, ",
            "#{noticeType,jdbcType=CHAR}, #{noticeContent,jdbcType=VARCHAR}, ",
            "#{status,jdbcType=CHAR}, #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, ",
            "#{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, ",
            "#{remark,jdbcType=VARCHAR}, #{tenantId,jdbcType=BIGINT})"
    })
    @Override
    int insert(CscpNotice record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @InsertProvider(type=CscpNoticeSqlProvider.class, method="insertSelective")
    @Override
    int insertSelective(CscpNotice record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @SelectProvider(type=CscpNoticeSqlProvider.class, method="selectByExample")
    @Results({
            @Result(column="notice_id", property="noticeId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="notice_title", property="noticeTitle", jdbcType=JdbcType.VARCHAR),
            @Result(column="notice_type", property="noticeType", jdbcType=JdbcType.CHAR),
            @Result(column="notice_content", property="noticeContent", jdbcType=JdbcType.VARCHAR),
            @Result(column="status", property="status", jdbcType=JdbcType.CHAR),
            @Result(column="create_by", property="createBy", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_by", property="updateBy", jdbcType=JdbcType.VARCHAR),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR),
            @Result(column="tenant_id", property="tenantId", jdbcType=JdbcType.BIGINT)
    })
    @Override
    List<CscpNotice> selectByExample(CscpNoticeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @Select({
            "select",
            "notice_id, notice_title, notice_type, notice_content, status, create_by, create_time, ",
            "update_by, update_time, remark, tenant_id",
            "from cscp_notice",
            "where notice_id = #{noticeId,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column="notice_id", property="noticeId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="notice_title", property="noticeTitle", jdbcType=JdbcType.VARCHAR),
            @Result(column="notice_type", property="noticeType", jdbcType=JdbcType.CHAR),
            @Result(column="notice_content", property="noticeContent", jdbcType=JdbcType.VARCHAR),
            @Result(column="status", property="status", jdbcType=JdbcType.CHAR),
            @Result(column="create_by", property="createBy", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_by", property="updateBy", jdbcType=JdbcType.VARCHAR),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR),
            @Result(column="tenant_id", property="tenantId", jdbcType=JdbcType.BIGINT)
    })
    @Override
    CscpNotice selectByPrimaryKey(Long noticeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @UpdateProvider(type=CscpNoticeSqlProvider.class, method="updateByExampleSelective")
    @Override
    int updateByExampleSelective(@Param("record") CscpNotice record, @Param("example") CscpNoticeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @UpdateProvider(type=CscpNoticeSqlProvider.class, method="updateByExample")
    @Override
    int updateByExample(@Param("record") CscpNotice record, @Param("example") CscpNoticeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @UpdateProvider(type=CscpNoticeSqlProvider.class, method="updateByPrimaryKeySelective")
    @Override
    int updateByPrimaryKeySelective(CscpNotice record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_notice
     *
     * @mbg.generated Sat Jan 15 15:55:30 CST 2022
     */
    @Update({
            "update cscp_notice",
            "set notice_title = #{noticeTitle,jdbcType=VARCHAR},",
            "notice_type = #{noticeType,jdbcType=CHAR},",
            "notice_content = #{noticeContent,jdbcType=VARCHAR},",
            "status = #{status,jdbcType=CHAR},",
            "create_by = #{createBy,jdbcType=VARCHAR},",
            "create_time = #{createTime,jdbcType=TIMESTAMP},",
            "update_by = #{updateBy,jdbcType=VARCHAR},",
            "update_time = #{updateTime,jdbcType=TIMESTAMP},",
            "remark = #{remark,jdbcType=VARCHAR},",
            "tenant_id = #{tenantId,jdbcType=BIGINT}",
            "where notice_id = #{noticeId,jdbcType=BIGINT}"
    })
    @Override
    int updateByPrimaryKey(CscpNotice record);


    @Select({"<script>",
            "select distinct n.* from cscp_notice n ",
            "left join cscp_user cu on n.create_by = cu.username ",
            "left join cscp_tenant t on t.id = n.tenant_id",
            "left join cscp_user_detail u on cu.id = u.user_id",
            "left join cscp_dept d on u.dept_id = d.dept_id ",
            "left join cscp_user_role ur on u.id = ur.user_id",
            "left join cscp_roles r on r.id = ur.role_id",
            "<where>  1=1 ",
            "${params.dataScope}",
            "<if test = 'noticeTitle != null and noticeTitle != \"\"'> and n.notice_title like concat('%',#{noticeTitle},'%')</if> ",
            "<if test = 'noticeType != null and noticeType != \"\"'> and n.notice_type like concat('%',#{noticeType},'%')</if> ",
            "<if test = 'createBy != null and createBy != \"\"'> and n.create_by like concat('%',#{createBy},'%')</if> ",
            "</where>",
            "</script>"
    })
    @Results({
            @Result(column="notice_id", property="noticeId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="notice_title", property="noticeTitle", jdbcType=JdbcType.VARCHAR),
            @Result(column="notice_type", property="noticeType", jdbcType=JdbcType.CHAR),
            @Result(column="notice_content", property="noticeContent", jdbcType=JdbcType.VARCHAR),
            @Result(column="status", property="status", jdbcType=JdbcType.CHAR),
            @Result(column="create_by", property="createBy", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_by", property="updateBy", jdbcType=JdbcType.VARCHAR),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR),
            @Result(column="tenant_id", property="tenantId", jdbcType=JdbcType.BIGINT)
    })
    List<CscpNotice> getCscpNotices(CscpNotice notice);


    /**
     * 批量删除公告信息
     *
     * @param noticeList 需要删除的公告ID
     * @return 结果
     */
    @Delete({"<script>" ,
            "delete from cscp_notice where notice_id in " ,
            "<foreach item=\"noticeId\" collection=\"noticeList\" open=\"(\" separator=\",\" close=\")\">",
            "#{noticeId}" ,
            " </foreach>",
            "</script>"})
    int deleteNoticeByIds(@Param("noticeList") List<Long> noticeList);
}