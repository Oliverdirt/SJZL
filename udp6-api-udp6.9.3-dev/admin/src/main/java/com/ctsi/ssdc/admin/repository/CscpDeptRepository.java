package com.ctsi.ssdc.admin.repository;

import com.ctsi.ssdc.admin.domain.CscpDept;
import com.ctsi.ssdc.admin.domain.CscpDeptExample;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

/**
 * @author ctsi-biyi-generator
*/
@Mapper
public interface CscpDeptRepository extends com.ctsi.ssdc.repository.BaseRepository<CscpDept, Long, CscpDeptExample> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @SelectProvider(type=CscpDeptSqlProvider.class, method="countByExample")
    @Override
    long countByExample(CscpDeptExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @DeleteProvider(type=CscpDeptSqlProvider.class, method="deleteByExample")
    @Override
    int deleteByExample(CscpDeptExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @Delete({
        "delete from cscp_dept",
        "where dept_id = #{deptId,jdbcType=BIGINT}"
    })
    @Override
    int deleteByPrimaryKey(Long deptId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @Insert({
        "insert into cscp_dept (dept_id, parent_id, ",
        "ancestors, dept_name, ",
        "order_num, leader, ",
        "phone, email, status, ",
        "create_by, create_time, ",
        "update_by, update_time, ",
        "tenant_id)",
        "values (#{deptId,jdbcType=BIGINT}, #{parentId,jdbcType=BIGINT}, ",
        "#{ancestors,jdbcType=VARCHAR}, #{deptName,jdbcType=VARCHAR}, ",
        "#{orderNum,jdbcType=INTEGER}, #{leader,jdbcType=VARCHAR}, ",
        "#{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, ",
        "#{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, ",
        "#{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, ",
        "#{tenantId,jdbcType=BIGINT})"
    })
    @Override
    int insert(CscpDept record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @InsertProvider(type=CscpDeptSqlProvider.class, method="insertSelective")
    @Override
    int insertSelective(CscpDept record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @SelectProvider(type=CscpDeptSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="dept_id", property="deptId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="parent_id", property="parentId", jdbcType=JdbcType.BIGINT),
        @Result(column="ancestors", property="ancestors", jdbcType=JdbcType.VARCHAR),
        @Result(column="dept_name", property="deptName", jdbcType=JdbcType.VARCHAR),
        @Result(column="order_num", property="orderNum", jdbcType=JdbcType.INTEGER),
        @Result(column="leader", property="leader", jdbcType=JdbcType.VARCHAR),
        @Result(column="phone", property="phone", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="status", property="status", jdbcType=JdbcType.CHAR),
        @Result(column="create_by", property="createBy", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_by", property="updateBy", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="tenant_id", property="tenantId", jdbcType=JdbcType.BIGINT)
    })
    @Override
    List<CscpDept> selectByExample(CscpDeptExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @Select({
        "select",
        "dept_id, parent_id, ancestors, dept_name, order_num, leader, phone, email, status, ",
        "create_by, create_time, update_by, update_time, tenant_id",
        "from cscp_dept",
        "where dept_id = #{deptId,jdbcType=BIGINT}"
    })
    @Results(id="deptMap",value = {
        @Result(column="dept_id", property="deptId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="parent_id", property="parentId", jdbcType=JdbcType.BIGINT),
        @Result(column="ancestors", property="ancestors", jdbcType=JdbcType.VARCHAR),
        @Result(column="dept_name", property="deptName", jdbcType=JdbcType.VARCHAR),
        @Result(column="order_num", property="orderNum", jdbcType=JdbcType.INTEGER),
        @Result(column="leader", property="leader", jdbcType=JdbcType.VARCHAR),
        @Result(column="phone", property="phone", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="status", property="status", jdbcType=JdbcType.CHAR),
        @Result(column="create_by", property="createBy", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_by", property="updateBy", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="tenant_id", property="tenantId", jdbcType=JdbcType.BIGINT)
    })
    @Override
    CscpDept selectByPrimaryKey(Long deptId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @UpdateProvider(type=CscpDeptSqlProvider.class, method="updateByExampleSelective")
    @Override
    int updateByExampleSelective(@Param("record") CscpDept record, @Param("example") CscpDeptExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @UpdateProvider(type=CscpDeptSqlProvider.class, method="updateByExample")
    @Override
    int updateByExample(@Param("record") CscpDept record, @Param("example") CscpDeptExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @UpdateProvider(type=CscpDeptSqlProvider.class, method="updateByPrimaryKeySelective")
    @Override
    int updateByPrimaryKeySelective(CscpDept record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_dept
     *
     * @mbg.generated Thu Jan 06 10:56:42 CST 2022
     */
    @Update({
        "update cscp_dept",
        "set parent_id = #{parentId,jdbcType=BIGINT},",
          "ancestors = #{ancestors,jdbcType=VARCHAR},",
          "dept_name = #{deptName,jdbcType=VARCHAR},",
          "order_num = #{orderNum,jdbcType=INTEGER},",
          "leader = #{leader,jdbcType=VARCHAR},",
          "phone = #{phone,jdbcType=VARCHAR},",
          "email = #{email,jdbcType=VARCHAR},",
          "status = #{status,jdbcType=CHAR},",
          "create_by = #{createBy,jdbcType=VARCHAR},",
          "create_time = #{createTime,jdbcType=TIMESTAMP},",
          "update_by = #{updateBy,jdbcType=VARCHAR},",
          "update_time = #{updateTime,jdbcType=TIMESTAMP},",
          "tenant_id = #{tenantId,jdbcType=BIGINT}",
        "where dept_id = #{deptId,jdbcType=BIGINT}"
    })
    @Override
    int updateByPrimaryKey(CscpDept record);


    /**
     * 查询部门管理数据
     *
     * @param dept 部门信息
     * @return 部门信息集合
     */
    @Select({"<script>" ,
            "select * from cscp_dept " ,
            "where tenant_id = #{tenantId} " ,
            "<if test='deptId != null and deptId != 0'>AND dept_id = #{deptId}</if> " ,
            "<if test='parentId != null and parentId != 0'>AND parent_id = #{parentId}</if> " ,
            "<if test='deptName != null and deptName != \"\"'>AND dept_name like concat('%', #{deptName}, '%')</if> " ,
            "<if test='status != null and status != \"\"'>AND status = #{status}</if> " ,
            "order by parent_id,order_num",
            "</script>"})
    @ResultMap(value = "deptMap")
    List<CscpDept> selectDeptList(CscpDept dept);

    /**
     * 根据角色ID查询部门树信息
     * @param roleId 角色ID
     * @return 选中部门列表
     */
    @Select({
            "select d.dept_id from cscp_dept d ",
            "left join cscp_role_dept rd on d.dept_id = rd.dept_id",
            "where rd.role_id = #{roleId}",
            "and d.dept_id not in ",
            "(select d.parent_id from cscp_dept d " ,
            "inner join cscp_role_dept rd on d.dept_id = rd.dept_id and rd.role_id =#{roleId})",
            "order by d.parent_id, d.order_num",
    })
    List<Long> selectDeptListByRoleId(Long roleId);


    /**
     * 根据租户id，查询部门id；
     * @param tenantId
     * @return
     */
    @Select({
            "select dept_id from cscp_dept  where tenant_id =#{tenantId} "
    })
    List<Long> selectByTenantId(@Param("tenantId") Long tenantId);

    /**
     * 批量删除部门
     * @param deptIds
     */

    @Delete("<script>" +
            "delete from cscp_dept where dept_id in" +
            "<foreach collection=\"deptIds\" item=\"id\" open=\"(\" separator=\",\" close=\")\">" +
            "#{id}" +
            "</foreach>" +
            "</script>")
    void deleteByIds(@Param("deptIds")List<Long> deptIds);

    /**
     * 根据租户ids，查询部门ids
     * @param tenantIds
     */
    @Select("<script>" +
            "select dept_id from cscp_dept where tenant_id in" +
            "<foreach collection=\"tenantIds\" item=\"tenantId\" open=\"(\" separator=\",\" close=\")\">" +
            "#{tenantId}" +
            "</foreach>" +
            "</script>")
    List<Long> selectDeptIdsByTenantIds( @Param("tenantIds") List<Long> tenantIds);


    /**
     * 删除部门
     */

    @Delete("<script>" +
            "delete from cscp_dept where create_by = 'thirdOauth' " +
            "</script>")
    void deleteThirdOauth();
}