package com.ctsi.ssdc.admin.repository;

import com.ctsi.ssdc.admin.domain.CscpRoles;
import com.ctsi.ssdc.admin.domain.CscpUser;
import com.ctsi.ssdc.admin.domain.CscpUserRole;
import com.ctsi.ssdc.admin.domain.CscpUserRoleExample;
import com.ctsi.ssdc.database.annotation.InjectByDataBaseType;
import com.ctsi.ssdc.database.enums.EnumDatabaseName;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;
import java.util.Set;

/**
 * @author MyBatis Generator
 */
@InjectByDataBaseType(includes = {EnumDatabaseName.ORACLE})
public interface CscpUserRoleRepository {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @SelectProvider(type = CscpUserRoleSqlProvider.class, method = "countByExample")
    long countByExample(CscpUserRoleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @DeleteProvider(type = CscpUserRoleSqlProvider.class, method = "deleteByExample")
    int deleteByExample(CscpUserRoleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @Delete({
            "delete from cscp_user_role",
            "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @Insert({
            "insert into cscp_user_role (id,user_id, role_id)",
            "values (#{id,jdbcType=BIGINT},#{userId,jdbcType=BIGINT}, #{roleId,jdbcType=BIGINT})"
    })
    //@Options(useGeneratedKeys=true, keyProperty="id")
    int insert(CscpUserRole record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @InsertProvider(type = CscpUserRoleSqlProvider.class, method = "insertSelective")
    @Options(useGeneratedKeys = true, keyProperty = "id")
    int insertSelective(CscpUserRole record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @SelectProvider(type = CscpUserRoleSqlProvider.class, method = "selectByExample")
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "user_id", property = "userId", jdbcType = JdbcType.BIGINT),
            @Result(column = "role_id", property = "roleId", jdbcType = JdbcType.BIGINT)
    })
    List<CscpUserRole> selectByExample(CscpUserRoleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @Select({
            "select",
            "id, user_id, role_id",
            "from cscp_user_role",
            "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "user_id", property = "userId", jdbcType = JdbcType.BIGINT),
            @Result(column = "role_id", property = "roleId", jdbcType = JdbcType.BIGINT)
    })
    CscpUserRole selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @UpdateProvider(type = CscpUserRoleSqlProvider.class, method = "updateByExampleSelective")
    int updateByExampleSelective(@Param("record") CscpUserRole record, @Param("example") CscpUserRoleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @UpdateProvider(type = CscpUserRoleSqlProvider.class, method = "updateByExample")
    int updateByExample(@Param("record") CscpUserRole record, @Param("example") CscpUserRoleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @UpdateProvider(type = CscpUserRoleSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(CscpUserRole record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @Update({
            "update cscp_user_role",
            "set user_id = #{userId,jdbcType=BIGINT},",
            "role_id = #{roleId,jdbcType=BIGINT}",
            "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(CscpUserRole record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @SelectProvider(type = CscpUserRoleSqlProvider.class, method = "selectByExampleWithPage")
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "user_id", property = "userId", jdbcType = JdbcType.BIGINT),
            @Result(column = "role_id", property = "roleId", jdbcType = JdbcType.BIGINT)
    })
    List<CscpUserRole> selectByExamplewithPage(CscpUserRoleExample example);

    @Select({
            "select r.id,r.name,r.data_scope "
                    + "from cscp_roles r,cscp_user_role ur "
                    + "where r.id=ur.role_id "
                    + "and ur.user_id=#{userId,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column = "id", property = "id"),
            @Result(column = "name", property = "name"),
            @Result(column = "data_scope", property = "dataScope")
    })
    List<CscpRoles> queryRoleByUserId(Long userId);

    /**
     * 根据角色id查询所关联的用户
     *
     * @param roleId
     * @return
     */
    @Select({"<script>"
            , " select  u.id,u.username "
            , " from cscp_user u"
            , " ,cscp_user_role ur "
            , " where u.id=ur.user_id "
            , " and ur.role_id=#{roleId,jdbcType=BIGINT}"
            , "</script> "
    })
    @Results({
            @Result(column = "id", property = "id"),
            @Result(column = "username", property = "username")
    })
    List<CscpUser> getUsersByRoleId(Long roleId);

    /**
     * 根据角色id查询所关联的用户
     *
     * @return
     */
    @Select({"<script>"
            , " select  u.id,u.username "
            , " from cscp_user u"
            , " ,cscp_user_role ur "
            , " where u.id=ur.user_id "
            , " and ur.role_id in "
            , "<foreach item=\"roleId\" collection=\"roleIds\" open=\"(\" separator=\",\" close=\")\">"
            , "#{roleId}"
            , " </foreach>"
            , "</script>"

    })
    @Results({
            @Result(column = "id", property = "id"),
            @Result(column = "username", property = "username")
    })
    List<CscpUser> getUsersByRoleIds(@Param("roleIds") Set<Long> roleIds);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_role
     *
     * @mbg.generated Mon May 07 08:50:32 CST 2018
     */
    @Select({
            "select",
            "ur.id, ur.user_id, ur.role_id",
            "from cscp_user_role ur , cscp_roles r",
            "where r.id = ur.role_id and r.name = 'admin' and user_id = #{userId,jdbcType=BIGINT} "
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "user_id", property = "userId", jdbcType = JdbcType.BIGINT),
            @Result(column = "role_id", property = "roleId", jdbcType = JdbcType.BIGINT)
    })
    CscpUserRole selectRoleIdByUserId(@Param("userId") Long userId);

    /**
     * 批量删除用户角色关联
     *
     * @param roleIds
     */

    @Delete("<script>" +
            "delete from cscp_user_role where role_id in" +
            "<foreach collection=\"roleIds\" item=\"roleId\" open=\"(\" separator=\",\" close=\")\">" +
            "#{roleId}" +
            "</foreach>" +
            "</script>")
    void deleteByRoleIds(@Param("roleIds") List<Long> roleIds);

    @Select({
            "select",
            "id, user_id, role_id",
            "from cscp_user_role ",
            "where user_id = #{userId,jdbcType=BIGINT} "
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
            @Result(column="role_id", property="roleId", jdbcType=JdbcType.BIGINT)
    })
    List<CscpUserRole> selectByUserId(@Param("userId") Long userId);

    @Select({
            "<script>select * from cscp_user_role where role_id in <foreach collection='list' item='item' open='(' separator=',' close=')'> #{item}</foreach></script>",
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
            @Result(column="role_id", property="roleId", jdbcType=JdbcType.BIGINT)
    })
    List<CscpUserRole> selectUserByRoleId(@Param("list") List<Long> list );
}
