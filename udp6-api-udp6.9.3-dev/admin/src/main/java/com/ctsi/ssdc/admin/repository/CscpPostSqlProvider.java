package com.ctsi.ssdc.admin.repository;

import com.ctsi.ssdc.admin.domain.CscpPost;
import com.ctsi.ssdc.admin.domain.CscpPostExample.Criteria;
import com.ctsi.ssdc.admin.domain.CscpPostExample.Criterion;
import com.ctsi.ssdc.admin.domain.CscpPostExample;
import java.util.List;
import java.util.Map;

import com.ctsi.ssdc.admin.domain.CscpRolesExample;
import com.ctsi.ssdc.admin.domain.CscpUserPostExample;

import org.apache.ibatis.jdbc.SQL;


/**
 * CscpPostSqlProvider
 *
 * @author hx
 * @date 2022-08-31 15:23:50
 */

public class CscpPostSqlProvider {

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_post
     */
    public String countByExample(CscpPostExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("cscp_post");
        applyWhere(sql, example, false);
        return sql.toString();
    }


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_post
     */
    public String deleteByExample(CscpPostExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("cscp_post");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_post
     */
    public String insertSelective(CscpPost record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("cscp_post");

        if (record.getPostId() != null) {
            sql.VALUES("post_id", "#{postId,jdbcType=BIGINT}");
        }
        if (record.getPostCode() != null) {
            sql.VALUES("post_code", "#{postCode,jdbcType=VARCHAR}");
        }
        if (record.getPostName() != null) {
            sql.VALUES("post_name", "#{postName,jdbcType=VARCHAR}");
        }
        if (record.getPostSort() != null) {
            sql.VALUES("post_sort", "#{postSort,jdbcType=INTEGER}");
        }
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=VARCHAR}");
        }
        if (record.getCreateBy() != null) {
            sql.VALUES("create_by", "#{createBy,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=DATE}");
        }
        if (record.getUpdateBy() != null) {
            sql.VALUES("update_by", "#{updateBy,jdbcType=VARCHAR}");
        }
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=DATE}");
        }
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        if (record.getTenantId() != null) {
            sql.VALUES("tenant_id", "#{tenantId,jdbcType=BIGINT}");
        }

        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_post
     */
    public String selectByExample(CscpPostExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("post_id");
        } else {
            sql.SELECT("post_id");
        }
        sql.SELECT("post_code");
        sql.SELECT("post_name");
        sql.SELECT("post_sort");
        sql.SELECT("status");
        sql.SELECT("create_by");
        sql.SELECT("create_time");
        sql.SELECT("update_by");
        sql.SELECT("update_time");
        sql.SELECT("remark");
        sql.SELECT("tenant_id");
        sql.FROM("cscp_post");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_post
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        CscpPost record = (CscpPost) parameter.get("record");
        CscpPostExample example = (CscpPostExample) parameter.get("example");

        SQL sql = new SQL();
        sql.UPDATE("cscp_post");

        if (record.getPostId() != null) {
            sql.SET("post_id = #{postId,jdbcType=BIGINT}");
        }
        if (record.getPostCode() != null) {
            sql.SET("post_code = #{postCode,jdbcType=VARCHAR}");
        }
        if (record.getPostName() != null) {
            sql.SET("post_name = #{postName,jdbcType=VARCHAR}");
        }
        if (record.getPostSort() != null) {
            sql.SET("post_sort = #{postSort,jdbcType=INTEGER}");
        }
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=VARCHAR}");
        }
        if (record.getCreateBy() != null) {
            sql.SET("create_by = #{createBy,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=DATE}");
        }
        if (record.getUpdateBy() != null) {
            sql.SET("update_by = #{updateBy,jdbcType=VARCHAR}");
        }
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=DATE}");
        }
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        if (record.getTenantId() != null) {
            sql.SET("tenant_id = #{tenantId,jdbcType=BIGINT}");
        }
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_post
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("cscp_post");
        sql.SET("post_id = #{postId,jdbcType=BIGINT}");
        sql.SET("post_code = #{postCode,jdbcType=VARCHAR}");
        sql.SET("post_name = #{postName,jdbcType=VARCHAR}");
        sql.SET("post_sort = #{postSort,jdbcType=INTEGER}");
        sql.SET("status = #{status,jdbcType=VARCHAR}");
        sql.SET("create_by = #{createBy,jdbcType=VARCHAR}");
        sql.SET("create_time = #{createTime,jdbcType=DATE}");
        sql.SET("update_by = #{updateBy,jdbcType=VARCHAR}");
        sql.SET("update_time = #{updateTime,jdbcType=DATE}");
        sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        sql.SET("tenant_id = #{tenantId,jdbcType=BIGINT}");

        CscpPostExample example = (CscpPostExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_post
     */
    public String updateByPrimaryKeySelective(CscpPost record) {
        SQL sql = new SQL();
        sql.UPDATE("cscp_post");

        if (record.getPostCode() != null) {
            sql.SET("post_code = #{postCode,jdbcType=VARCHAR}");
        }
        if (record.getPostName() != null) {
            sql.SET("post_name = #{postName,jdbcType=VARCHAR}");
        }
        if (record.getPostSort() != null) {
            sql.SET("post_sort = #{postSort,jdbcType=INTEGER}");
        }
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=VARCHAR}");
        }
        if (record.getCreateBy() != null) {
            sql.SET("create_by = #{createBy,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=DATE}");
        }
        if (record.getUpdateBy() != null) {
            sql.SET("update_by = #{updateBy,jdbcType=VARCHAR}");
        }
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=DATE}");
        }
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        if (record.getTenantId() != null) {
            sql.SET("tenant_id = #{tenantId,jdbcType=BIGINT}");
        }
        sql.WHERE("post_id = #{postId,jdbcType=BIGINT}");

        return sql.toString();
    }


    /**
     * This method was generated by  Generator.
     * This method corresponds to the database table cscp_post
     */
    protected void applyWhere(SQL sql, CscpPostExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }

        String parmPhrase1;
        String parmPhrase1Th;
        String parmPhrase2;
        String parmPhrase2Th;
        String parmPhrase3;
        String parmPhrase3Th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2Th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3Th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }

        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }

                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }

                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1Th, criterion.getCondition(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2Th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3Th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }

        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
    public String selectByExampleWithPage(CscpPostExample example) {
        String sql = selectByExample(example);
        /*Pageable page = example.getPage();
        if(page != null) {
            sql = String.format("%s limit %d,%d", sql, page.getOffset(), page.getPageSize());
        }*/
        return sql;
    }

}
