package com.ctsi.ssdc.admin.repository;

import com.ctsi.ssdc.admin.domain.CscpUser;
import com.ctsi.ssdc.admin.domain.CscpUserDetail;
import com.ctsi.ssdc.admin.domain.CscpUserDetailExample;
import com.ctsi.ssdc.admin.domain.CscpUserDetailLike;
import com.ctsi.ssdc.admin.domain.dto.CscpUserDetailDTO;
import com.ctsi.ssdc.database.annotation.InjectByDataBaseType;
import com.ctsi.ssdc.database.enums.EnumDatabaseName;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;
import java.util.Set;

/**
 * @author MyBatis Generator
*/
@InjectByDataBaseType(includes= {EnumDatabaseName.ORACLE,EnumDatabaseName.PostgreSQL})
public interface CscpUserDetailRepository {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @SelectProvider(type=CscpUserDetailSqlProvider.class, method="countByExample")
    long countByExample(CscpUserDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @DeleteProvider(type=CscpUserDetailSqlProvider.class, method="deleteByExample")
    int deleteByExample(CscpUserDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @Delete({
        "delete from cscp_user_detail",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @Insert({
        "insert into cscp_user_detail (id,user_id, family_name, ",
        "name, mobile, email, ",
        "img_path, last_login, ",
        "disc_title, disc_detail, ",
        "register_time, admin_flag,",
            "dept_id, tenant_id,third_type)",
        "values (#{id,jdbcType=BIGINT},#{userId,jdbcType=BIGINT}, #{familyName,jdbcType=VARCHAR}, ",
        "#{name,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, ",
        "#{imgPath,jdbcType=VARCHAR}, #{lastLogin,jdbcType=TIMESTAMP}, ",
        "#{discTitle,jdbcType=VARCHAR}, #{discDetail,jdbcType=VARCHAR}, ",
        "#{registerTime,jdbcType=TIMESTAMP},#{adminFlag,jdbcType=VARCHAR},",
            "#{deptId,jdbcType=BIGINT}, #{tenantId,jdbcType=BIGINT},#{thirdType,jdbcType=VARCHAR})"
    })
    //@Options(useGeneratedKeys=true, keyProperty="id")
    int insert(CscpUserDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @InsertProvider(type=CscpUserDetailSqlProvider.class, method="insertSelective")
    @Options(useGeneratedKeys=true, keyProperty="id")
    int insertSelective(CscpUserDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @SelectProvider(type=CscpUserDetailSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
        @Result(column="family_name", property="familyName", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile", property="mobile", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="img_path", property="imgPath", jdbcType=JdbcType.VARCHAR),
        @Result(column="last_login", property="lastLogin", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="disc_title", property="discTitle", jdbcType=JdbcType.VARCHAR),
        @Result(column="disc_detail", property="discDetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="register_time", property="registerTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="admin_flag", property="adminFlag", jdbcType=JdbcType.VARCHAR),
        @Result(column="tenant_id", property="tenantId", jdbcType=JdbcType.BIGINT),
        @Result(column="dept_id", property="deptId", jdbcType=JdbcType.BIGINT)
    })
    List<CscpUserDetail> selectByExample(CscpUserDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @Select({
        "select",
        "id, user_id, family_name, name, mobile, email, img_path, last_login, disc_title, ",
        "disc_detail, register_time, admin_flag",
        "from cscp_user_detail",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
        @Result(column="family_name", property="familyName", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile", property="mobile", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="img_path", property="imgPath", jdbcType=JdbcType.VARCHAR),
        @Result(column="last_login", property="lastLogin", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="disc_title", property="discTitle", jdbcType=JdbcType.VARCHAR),
        @Result(column="disc_detail", property="discDetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="register_time", property="registerTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="admin_flag", property="adminFlag", jdbcType=JdbcType.VARCHAR)
    })
    CscpUserDetail selectByPrimaryKey(Long id);
    
    @Select({
        "select",
        "a.id, a.user_id, family_name, name, mobile, email, img_path, last_login, disc_title, ",
        "disc_detail, register_time,admin_flag, u.username,",
        "from cscp_user u, cscp_user_detail a, cscp_user_work_group b",
        "where u.id = a.user_id and a.user_id = b.user_id and b.group_id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
        @Result(column="family_name", property="familyName", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile", property="mobile", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="img_path", property="imgPath", jdbcType=JdbcType.VARCHAR),
        @Result(column="last_login", property="lastLogin", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="disc_title", property="discTitle", jdbcType=JdbcType.VARCHAR),
        @Result(column="disc_detail", property="discDetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="register_time", property="registerTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="admin_flag", property="adminFlag", jdbcType=JdbcType.VARCHAR),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR)
    })
    List<CscpUserDetail> selectByWorkGroupId(Long id);
    
    @Select({
        "select",
        "b.id, b.user_id, a.username, family_name, name, mobile, email, img_path, last_login, disc_title, ",
        "disc_detail, register_time,admin_flag,tenant_id",
        "from cscp_user a, cscp_user_detail b",
        "where a.id = b.user_id",
        "and b.user_id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
        @Result(column="family_name", property="familyName", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile", property="mobile", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="img_path", property="imgPath", jdbcType=JdbcType.VARCHAR),
        @Result(column="last_login", property="lastLogin", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="disc_title", property="discTitle", jdbcType=JdbcType.VARCHAR),
        @Result(column="disc_detail", property="discDetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="register_time", property="registerTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="admin_flag", property="adminFlag", jdbcType=JdbcType.VARCHAR),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
            @Result(column="tenant_id", property="tenantId", jdbcType=JdbcType.BIGINT),
    })
    CscpUserDetail selectByUserId(Long userId);
    
    
    @Select({
        "select",
        "b.id, b.user_id, a.username, family_name, name, mobile, email, img_path, last_login, disc_title, ",
        "disc_detail, register_time,admin_flag",
        "from cscp_user a, cscp_user_detail b, cscp_user_org c",
        "where a.id = b.user_id and a.id = c.user_id"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
        @Result(column="family_name", property="familyName", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile", property="mobile", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="img_path", property="imgPath", jdbcType=JdbcType.VARCHAR),
        @Result(column="last_login", property="lastLogin", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="disc_title", property="discTitle", jdbcType=JdbcType.VARCHAR),
        @Result(column="disc_detail", property="discDetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="register_time", property="registerTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="admin_flag", property="adminFlag", jdbcType=JdbcType.VARCHAR),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
    })
    List<CscpUserDetail> selectByOrgs();
    

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @UpdateProvider(type=CscpUserDetailSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") CscpUserDetail record,
                                 @Param("example") CscpUserDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @UpdateProvider(type=CscpUserDetailSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") CscpUserDetail record,
                        @Param("example") CscpUserDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @UpdateProvider(type=CscpUserDetailSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(CscpUserDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @Update({
        "update cscp_user_detail",
        "set user_id = #{userId,jdbcType=BIGINT},",
          "family_name = #{familyName,jdbcType=VARCHAR},",
          "name = #{name,jdbcType=VARCHAR},",
          "mobile = #{mobile,jdbcType=VARCHAR},",
          "email = #{email,jdbcType=VARCHAR},",
          "img_path = #{imgPath,jdbcType=VARCHAR},",
          "last_login = #{lastLogin,jdbcType=TIMESTAMP},",
          "disc_title = #{discTitle,jdbcType=VARCHAR},",
          "disc_detail = #{discDetail,jdbcType=VARCHAR},",
          "register_time = #{registerTime,jdbcType=TIMESTAMP},",
            "admin_flag = #{adminFlag,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(CscpUserDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cscp_user_detail
     *
     * @mbg.generated Mon Apr 23 08:56:34 CST 2018
     */
    @SelectProvider(type=CscpUserDetailSqlProvider.class, method="selectByExampleWithPage")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT),
        @Result(column="family_name", property="familyName", jdbcType=JdbcType.VARCHAR),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="mobile", property="mobile", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="img_path", property="imgPath", jdbcType=JdbcType.VARCHAR),
        @Result(column="last_login", property="lastLogin", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="disc_title", property="discTitle", jdbcType=JdbcType.VARCHAR),
        @Result(column="disc_detail", property="discDetail", jdbcType=JdbcType.VARCHAR),
        @Result(column="register_time", property="registerTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="admin_flag", property="adminFlag", jdbcType=JdbcType.VARCHAR)
    })
    List<CscpUserDetail> selectByExamplewithPage(CscpUserDetailExample example);

    @Results({
        @Result(column="last_login", property="lastLogin"),
        @Result(column="mobile", property="mobile"),
        @Result(column="disc_title", property="discTitle"),
        @Result(column="register_time", property="registerTime"),
        @Result(column="user_id", property="userId"),
        @Result(column="img_path", property="imgPath"),
        @Result(column="name", property="name"),
        @Result(column="disc_detail", property="discDetail"),
        @Result(column="id", property="id"),
        @Result(column="family_name", property="familyName"),
        @Result(column="email", property="email"),
        @Result(column="username", property="username"),
        @Result(column="roleNames", property="roleNames"),
        @Result(column="roleIds", property="roleIds")

    })
	@SelectProvider(type=CscpUserDetailSqlProvider.class, method="queryUserDetail")
	List<CscpUserDetailDTO> queryUserDetail(CscpUserDetailLike cscpUserDetailLike, String orderby);

   /* @Results({
            @Result(column="last_login", property="lastLogin"),
            @Result(column="mobile", property="mobile"),
            @Result(column="disc_title", property="discTitle"),
            @Result(column="register_time", property="registerTime"),
            @Result(column="user_id", property="userId"),
            @Result(column="img_path", property="imgPath"),
            @Result(column="name", property="name"),
            @Result(column="disc_detail", property="discDetail"),
            @Result(column="id", property="id"),
            @Result(column="family_name", property="familyName"),
            @Result(column="email", property="email"),
            @Result(column="username", property="username"),
            @Result(column="roleNames", property="roleNames"),
            @Result(column="roleIds", property="roleIds")

    })
    @SelectProvider(type=CscpUserDetailSqlProvider.class, method="queryUserDetailPreventSQLAttack")
    List<CscpUserDetailDTO> queryUserDetailPreventSQLAttack(String usernameLike,
            String familyNameLike,
            String nameLike,
            String mobileLike,
            String emailLike,
            String discTitleLike,
            String discDetailLike,
            String orderby);*/

    @Results({
            @Result(column="last_login", property="lastLogin"),
            @Result(column="mobile", property="mobile"),
            @Result(column="disc_title", property="discTitle"),
            @Result(column="register_time", property="registerTime"),
            @Result(column="user_id", property="userId"),
            @Result(column="img_path", property="imgPath"),
            @Result(column="name", property="name"),
            @Result(column="disc_detail", property="discDetail"),
            @Result(column="id", property="id"),
            @Result(column="family_name", property="familyName"),
            @Result(column="email", property="email"),
            @Result(column="username", property="username"),
            @Result(column="roleNames", property="roleNames"),
            @Result(column="roleIds", property="roleIds"),
            @Result(column="admin_flag", property="adminFlag")

    })
    @Select("<script> select cscp_user.username " +
            "        , cscp_user_detail.id as id " +
            "        , cscp_user_detail.user_id " +
            "        , cscp_user_detail.family_name " +
            "        , cscp_user_detail.name " +
            "        , cscp_user_detail.mobile " +
            "        , cscp_user_detail.email " +
            "        , cscp_user_detail.img_path " +
            "        , cscp_user_detail.last_login " +
            "        , cscp_user_detail.disc_title " +
            "        , cscp_user_detail.disc_detail " +
            "        , cscp_user_detail.register_time  " +
            "        , cscp_user_detail.admin_flag  "+
            "          from cscp_user  " +
            "        left JOIN cscp_user_detail on cscp_user.id=cscp_user_detail.user_id where  " +
            " cscp_user_detail.tenant_id = #{tenantId} "+

            " <if test=\"deptIdEquals != null and deptIdEquals != '' \" >" +
            " and (cscp_user_detail.dept_id = #{deptIdEquals} or cscp_user_detail.dept_id in " +
            "(select t.dept_id FROM cscp_dept t WHERE ancestors like CONCAT('%,',#{deptIdEquals},'%')) )  " +
            " </if>" +

            " <if test=\"usernameLike != null and usernameLike != '' \" >" +
            " and  cscp_user.username like  concat('%',#{usernameLike},'%') " +
            " </if>" +

            " <if test=\"familyNameLike != null and familyNameLike != '' \" >" +
            " and cscp_user_detail.family_name like  concat('%',#{familyNameLike},'%') " +
            " </if>" +

            " <if test=\"nameLike != null and nameLike != '' \" >" +
            " and cscp_user_detail.name like  concat('%',#{nameLike},'%') " +
            " </if>" +

            " <if test=\"mobileLike != null and mobileLike != '' \" >" +
            " and cscp_user_detail.mobile like  concat('%',#{mobileLike},'%') " +
            " </if>" +

            " <if test=\"emailLike != null and emailLike != '' \" >" +
            " and cscp_user_detail.email like  concat('%',#{emailLike},'%') " +
            " </if>" +

            " <if test=\"discTitleLike != null and discTitleLike != '' \" >" +
            " and cscp_user_detail.disc_title like  concat('%',#{discTitleLike},'%') " +
            " </if>" +

            " <if test=\"discDetailLike != null and discDetailLike != '' \" >" +
            " and cscp_user_detail.disc_detail like  concat('%',#{discDetailLike},'%') ) " +
            " </if>" +
            " <if test=\"orderby != null and orderby != '' \" >" +
            " order by   cscp_user_detail.${orderby} " +
            " </if>" +

            "</script>"

    )
//            "or cscp_user_detail.family_name like '%#{familyNameLike}%' " )
//            "ORDER BY #{orderby} ")
    List<CscpUserDetailDTO> queryUserDetailPreventSqlAttack(
            @Param("usernameLike")String usernameLike,
            @Param("familyNameLike")String familyNameLike,
            @Param("nameLike")String nameLike,
            @Param("mobileLike")String mobileLike,
            @Param("emailLike")String emailLike,
            @Param("discTitleLike")String discTitleLike,
            @Param("discDetailLike")String discDetailLike,
            @Param("deptIdEquals")String deptIdEquals,
            @Param("orderby")String orderby,
            @Param("tenantId")Long tenantId
    );

    @Results({
        @Result(column="last_login", property="lastLogin"),
        @Result(column="mobile", property="mobile"),
        @Result(column="disc_title", property="discTitle"),
        @Result(column="register_time", property="registerTime"),
        @Result(column="user_id", property="userId"),
        @Result(column="img_path", property="imgPath"),
        @Result(column="name", property="name"),
        @Result(column="disc_detail", property="discDetail"),
        @Result(column="id", property="id"),
        @Result(column="family_name", property="familyName"),
        @Result(column="email", property="email"),
        @Result(column="username", property="username"),
    })
	@SelectProvider(type=CscpUserDetailSqlProvider.class, method="queryUserDetailByUserId")
	List<CscpUserDetailDTO> queryUserDetailByUserId(String userid, String orderby);
    
    @Results({
        @Result(column="last_login", property="lastLogin"),
        @Result(column="mobile", property="mobile"),
        @Result(column="disc_title", property="discTitle"),
        @Result(column="register_time", property="registerTime"),
        @Result(column="user_id", property="userId"),
        @Result(column="img_path", property="imgPath"),
        @Result(column="name", property="name"),
        @Result(column="disc_detail", property="discDetail"),
        @Result(column="id", property="id"),
        @Result(column="family_name", property="familyName"),
        @Result(column="email", property="email"),
        @Result(column="username", property="username"),
        @Result(column="admin_flag", property="adminFlag"),
        @Result(column="tenant_id", property="tenantId"),
        @Result(column="tenant_account", property="tenantAccount"),
        @Result(column="dept_id", property="deptId")
    })
    @Select({"select u.username, d.id as id, d.user_id as user_id," ,
            "d.tenant_id as tenant_id,t.tenant_account as tenant_account,",
    		"family_name, name, mobile, email, img_path, last_login,", 
    		"disc_title, disc_detail, register_time, admin_flag, dept_id",
    		"from cscp_user u, cscp_user_detail d, cscp_tenant t",
    		"where u.id = d.user_id and  d.tenant_id = t.id and u.id=#{userId,jdbcType=BIGINT}"})
    CscpUserDetailDTO queryByUserId(Long userId);

    @Select({"<script>",
            "select u.username,u.password, d.id as id, d.user_id as user_id,",
            "family_name, name, mobile, email, img_path, last_login,",
            "disc_title, disc_detail, register_time, admin_flag,tenant_id,dept_id",
            "from cscp_user u, cscp_user_detail d",
            "where u.id = d.user_id ",
            "and u.username = #{username}",
            "and d.tenant_id=#{tenantId,jdbcType=BIGINT}",
            "</script>"
    })
    @Results({
            @Result(column="last_login", property="lastLogin"),
            @Result(column="mobile", property="mobile"),
            @Result(column="disc_title", property="discTitle"),
            @Result(column="register_time", property="registerTime"),
            @Result(column="user_id", property="userId"),
            @Result(column="img_path", property="imgPath"),
            @Result(column="name", property="name"),
            @Result(column="disc_detail", property="discDetail"),
            @Result(column="id", property="id"),
            @Result(column="family_name", property="familyName"),
            @Result(column="email", property="email"),
            @Result(column="username", property="username"),
            @Result(column="admin_flag", property="adminFlag"),
            @Result(column="password", property="password"),
            @Result(column="username", property="username"),
            @Result(column="tenant_id", property="tenantId"),
            @Result(column="dept_id", property="deptId")
    })
    CscpUserDetailDTO finUserByUsernameAndTenantId(@Param("tenantId") Long tenantId,@Param("username") String username);
    @Select({"select u.username, d.id as id, d.user_id as user_id,d.tenant_id as tenant_id,",
        "family_name, name, mobile, email, img_path, last_login,",
        "disc_title, disc_detail, register_time, admin_flag",
        "from cscp_user u, cscp_user_detail d",
        "where u.id = d.user_id and d.tenant_id=#{tenant_id,jdbcType=BIGINT}"})
    @Results({
           @Result(column="last_login", property="lastLogin"),
           @Result(column="mobile", property="mobile"),
           @Result(column="disc_title", property="discTitle"),
           @Result(column="register_time", property="registerTime"),
           @Result(column="user_id", property="userId"),
           @Result(column="img_path", property="imgPath"),
           @Result(column="name", property="name"),
           @Result(column="disc_detail", property="discDetail"),
           @Result(column="id", property="id"),
           @Result(column="family_name", property="familyName"),
           @Result(column="email", property="email"),
           @Result(column="username", property="username"),
           @Result(column="admin_flag", property="adminFlag"),
           @Result(column="password", property="password"),
           @Result(column="username", property="username"),
           @Result(column="tenant_id", property="tenantId"),
           @Result(column="dept_id", property="deptId")
    })
    List<CscpUserDetailDTO> selectByTenantId(Long tenantId);


    @Select({"select u.username, d.id as id, d.user_id as user_id,d.tenant_id as tenant_id,",
            "family_name, name, mobile, email, img_path, last_login,",
            "disc_title, disc_detail, register_time, admin_flag",
            "from cscp_user u, cscp_user_detail d",
            "where u.id = d.user_id and admin_flag = #{adminFlag} and d.tenant_id=#{tenantId,jdbcType=BIGINT}"})
    @Results({
            @Result(column="last_login", property="lastLogin"),
            @Result(column="mobile", property="mobile"),
            @Result(column="disc_title", property="discTitle"),
            @Result(column="register_time", property="registerTime"),
            @Result(column="user_id", property="userId"),
            @Result(column="img_path", property="imgPath"),
            @Result(column="name", property="name"),
            @Result(column="disc_detail", property="discDetail"),
            @Result(column="id", property="id"),
            @Result(column="family_name", property="familyName"),
            @Result(column="email", property="email"),
            @Result(column="username", property="username"),
            @Result(column="admin_flag", property="adminFlag"),
            @Result(column="password", property="password"),
            @Result(column="username", property="username"),
            @Result(column="tenant_id", property="tenantId"),
            @Result(column="dept_id", property="deptId")
    })
    CscpUserDetailDTO selectAdminByTenantId(@Param("tenantId") Long tenantId, @Param("adminFlag") String adminFlag);

    /**
     * 批量删除
     * @param delUserIds
     */
    @Delete("<script>" +
            "delete from cscp_user_detail where user_id in" +
            "<foreach collection=\"delUserIds\" item=\"userId\" open=\"(\" separator=\",\" close=\")\">" +
            "#{userId}" +
            "</foreach>" +
            "</script>")
    void deleteByUserIds(@Param("delUserIds") List<Long> delUserIds);

    /**
     * 根据租户ids，查询用户
     * @param tenantIds
     */
    @Select("<script>" +
            "select user_id from cscp_user_detail where tenant_id in" +
            "<foreach collection=\"tenantIds\" item=\"tenantId\" open=\"(\" separator=\",\" close=\")\">" +
            "#{tenantId}" +
            "</foreach>" +
            "</script>")
    List<Long> selectUserIdsByTenantIds(@Param("tenantIds") List<Long> tenantIds);

    /**
     * 根据电话号码邮箱查询用户
     */
    @Select({"<script>" ,
            "select ud.*,u.username from cscp_user_detail ud,cscp_user u " ,
            "where ud.user_id = u.id  " ,
            "<if test= \"mobile != null and mobile !=''\"> and ud.mobile = #{mobile}</if>",
            "<if test= \"email != null and email !=''\"> and ud.email = #{email}</if>",
            " limit 1",
            "</script>"
    })
    @Results({
            @Result(column="last_login", property="lastLogin"),
            @Result(column="mobile", property="mobile"),
            @Result(column="disc_title", property="discTitle"),
            @Result(column="register_time", property="registerTime"),
            @Result(column="user_id", property="userId"),
            @Result(column="img_path", property="imgPath"),
            @Result(column="name", property="name"),
            @Result(column="disc_detail", property="discDetail"),
            @Result(column="id", property="id"),
            @Result(column="family_name", property="familyName"),
            @Result(column="email", property="email"),
            @Result(column="username", property="username"),
            @Result(column="admin_flag", property="adminFlag"),
            @Result(column="password", property="password"),
            @Result(column="username", property="username"),
            @Result(column="tenant_id", property="tenantId"),
            @Result(column="dept_id", property="deptId")
    })
    CscpUserDetail getUserInfoByMobile(@Param("mobile") String mobile,@Param("email") String email);


    /**
     * 根据导入标志third_type，查询用户
     * @param thirdType
     */
    @Select("<script>" +
            "select user_id from cscp_user_detail where third_type = #{thirdType} " +
            "</script>")
    List<Long> selectUserIdsByThirdType(@Param("thirdType") String thirdType);


    @Select({"SELECT d.id,d.user_id,d.family_name,\n" +
            "\td.NAME,d.mobile,d.email,\n" +
            "\td.img_path,d.last_login,d.disc_title,\n" +
            "\td.disc_title,d.admin_flag,d.dept_id,d.tenant_id, \n" +
            "u.username as username,\n" +
            "\tu.password as password, t.tenant_account "+
            "FROM\n" +
            "\tcscp_user_detail d\n" +
            "\tLEFT JOIN cscp_user u ON d.user_id = u.id " +
            "LEFT JOIN cscp_tenant t on t.id = d.tenant_id",
            "where u.username =#{name,jdbcType=BIGINT} and d.mobile =#{mobile,jdbcType=BIGINT}"})
    @Results({
            @Result(column="last_login", property="lastLogin"),
            @Result(column="mobile", property="mobile"),
            @Result(column="disc_title", property="discTitle"),
            @Result(column="register_time", property="registerTime"),
            @Result(column="user_id", property="userId"),
            @Result(column="img_path", property="imgPath"),
            @Result(column="name", property="name"),
            @Result(column="disc_detail", property="discDetail"),
            @Result(column="id", property="id"),
            @Result(column="family_name", property="familyName"),
            @Result(column="email", property="email"),
            @Result(column="username", property="username"),
            @Result(column="admin_flag", property="adminFlag"),
            @Result(column="password", property="password"),
            @Result(column="username", property="username"),
            @Result(column="tenant_id", property="tenantId"),
            @Result(column="tenant_account", property="tenantAccount"),
            @Result(column="dept_id", property="deptId")
    })
    CscpUserDetailDTO findUserByNameAndMobile(@Param("name")String name, @Param("mobile") String mobile);


    @Select({"<script>" ,
            "select u.id,u.username from cscp_user_detail ud,cscp_user u " ,
            "where ud.user_id = u.id and ud.tenant_id = #{tenantId,jdbcType=BIGINT} " ,
            "</script>"
    })
    @Results({
            @Result(column="last_login", property="lastLogin"),
            @Result(column="mobile", property="mobile"),
            @Result(column="disc_title", property="discTitle"),
            @Result(column="register_time", property="registerTime"),
            @Result(column="user_id", property="userId"),
            @Result(column="img_path", property="imgPath"),
            @Result(column="name", property="name"),
            @Result(column="disc_detail", property="discDetail"),
            @Result(column="id", property="id"),
            @Result(column="family_name", property="familyName"),
            @Result(column="email", property="email"),
            @Result(column="username", property="username"),
            @Result(column="admin_flag", property="adminFlag"),
            @Result(column="password", property="password"),
            @Result(column="username", property="username"),
            @Result(column="tenant_id", property="tenantId"),
            @Result(column="dept_id", property="deptId")
    })
    List<CscpUserDetail> selectAllIdAndUserName(@Param("tenantId") Long tenantId);

    /**
     * 根据角色id查询所关联的用户
     *
     * @return
     */
    @Select({"<script>"
            , " select u.id,u.username from cscp_user_detail ud,cscp_user u "
            , " where u.id=ud.user_id "
            , " and ud.dept_id in "
            , "<foreach item=\"deptId\" collection=\"deptIds\" open=\"(\" separator=\",\" close=\")\">"
            , "#{deptId}"
            , " </foreach>"
            , "</script>"

    })
    @Results({
            @Result(column = "id", property = "id"),
            @Result(column = "username", property = "username")
    })
    List<CscpUser> getUsersByDeptIds(@Param("deptIds")Set<Long> deptIds);

}